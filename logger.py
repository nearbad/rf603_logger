# -*- coding: utf-8 -*-
import serial
import serial.tools.list_ports
import csv
import datetime
import time
import struct
import os
import sys
import matplotlib.pyplot as plt
import numpy as np

class RF603UltraFastLogger:
    def __init__(self):
        self.ser = None
        self.measurement_count = 0
        self.sensor_range = 250
        self.base_distance = 80
        self.is_running = False
        self.data_dir = "rf603_data"  # –ü–∞–ø–∫–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
        self.MIN_DISTANCE = 100.0  # –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –º–º
        self.MAX_DISTANCE = 160.0  # –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –º–º
        self.TARGET_FREQUENCY = 2000  # –¶–µ–ª–µ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞ –≤ –ì—Ü
        self.TIMEOUT_DURATION = 1.5  # –¢–∞–π–º–∞—É—Ç 1.5 —Å–µ–∫—É–Ω–¥—ã –±–µ–∑ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self.selected_port = None
        self.selected_baudrate = None
        
    def connect(self, port='COM3', baudrate=921600):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –¥–∞—Ç—á–∏–∫—É –†–§603"""
        try:
            self.ser = serial.Serial(
                port=port,
                baudrate=baudrate,
                bytesize=serial.EIGHTBITS,
                parity=serial.PARITY_NONE,
                stopbits=serial.STOPBITS_ONE,
                timeout=0.001  # –£–º–µ–Ω—å—à–∏–ª–∏ timeout –¥–ª—è –≤—ã—Å–æ–∫–æ–π —á–∞—Å—Ç–æ—Ç—ã
            )
            time.sleep(1)
            self.ser.reset_input_buffer()
            self.ser.reset_output_buffer()
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ {port} –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ {baudrate}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False

    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        self.is_running = False
        if self.ser and self.ser.is_open:
            self.ser.close()
            print("üîå –ü–æ—Ä—Ç –∑–∞–∫—Ä—ã—Ç")

    def reconnect(self):
        """–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –¥–∞—Ç—á–∏–∫—É"""
        self.close()
        time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
        if self.selected_port and self.selected_baudrate:
            return self.connect(self.selected_port, self.selected_baudrate)
        return False

    def create_experiment_directory(self, experiment_name):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞"""
        experiment_dir = os.path.join(self.data_dir, experiment_name)
        if not os.path.exists(experiment_dir):
            os.makedirs(experiment_dir)
            print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞: {experiment_dir}")
        return experiment_dir

    def parse_riftek_binary_response(self, data):
        """–ü–∞—Ä—Å–∏–Ω–≥ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—É RIFTEK"""
        if not data or len(data) < 2:
            return None
            
        try:
            if not all(byte & 0x80 for byte in data):
                return None
                
            result_bytes = []
            for i in range(0, len(data) - 1, 2):
                if i + 1 < len(data):
                    low_byte = data[i] & 0x0F
                    high_byte = data[i + 1] & 0x0F
                    combined_byte = (high_byte << 4) | low_byte
                    result_bytes.append(combined_byte)
            
            return result_bytes
        except Exception:
            return None

    def decode_measurement(self, data):
        """–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è"""
        if not data or len(data) < 2:
            return None
            
        try:
            raw_value = struct.unpack('<H', bytes(data[:2]))[0]
            distance_mm = (raw_value * self.sensor_range) / 16384.0
            return distance_mm
        except Exception:
            return None

    def get_measurement_ultra_fast(self):
        """–£–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è"""
        try:
            self.ser.write(b'R2\r\n')
            response = self.ser.read(4)  # –ß–∏—Ç–∞–µ–º —Ä–æ–≤–Ω–æ 4 –±–∞–π—Ç–∞
            
            if response and len(response) == 4:
                parsed = self.parse_riftek_binary_response(response)
                if parsed:
                    distance = self.decode_measurement(parsed)
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
                    if distance is not None and self.MIN_DISTANCE <= distance <= self.MAX_DISTANCE:
                        return distance
                    else:
                        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏–π –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
                        return None
            return None
        except Exception:
            return None

    def identify_device(self):
        """–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        print("üîç –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...")
        
        try:
            self.ser.write(b'V\r\n')
            time.sleep(0.2)
            
            response = self.ser.read(16)  # –û–∂–∏–¥–∞–µ–º 16 –±–∞–π—Ç –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            if response:
                parsed = self.parse_riftek_binary_response(response)
                if parsed and len(parsed) >= 8:
                    device_type = parsed[0]
                    firmware_version = parsed[1]
                    serial_number = struct.unpack('<H', bytes(parsed[2:4]))[0]
                    base_distance = struct.unpack('<H', bytes(parsed[4:6]))[0]
                    sensor_range = struct.unpack('<H', bytes(parsed[6:8]))[0]
                    
                    print(f"üìü –¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {device_type}")
                    print(f"üî¢ –í–µ—Ä—Å–∏—è –ü–û: {firmware_version}")
                    print(f"üè∑Ô∏è –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: {serial_number}")
                    print(f"üìè –ë–∞–∑–æ–≤–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {base_distance} –º–º")
                    print(f"üìê –î–∏–∞–ø–∞–∑–æ–Ω: {sensor_range} –º–º")
                    print(f"üìä –¢–µ–∫—É—â–∏–π –¥–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: {self.MIN_DISTANCE}-{self.MAX_DISTANCE} –º–º")
                    print(f"üéØ –¶–µ–ª–µ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞: {self.TARGET_FREQUENCY} –ì—Ü")
                    
                    self.sensor_range = sensor_range
                    self.base_distance = base_distance
                    return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        
        return False

    def set_distance_limits(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é"""
        print("\nüìè –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é")
        print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: 80-250 –º–º")
        print(f"   –¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è: {self.MIN_DISTANCE}-{self.MAX_DISTANCE} –º–º")
        
        while True:
            try:
                min_input = input(f"   –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é {self.MIN_DISTANCE} –º–º): ").strip()
                if min_input:
                    min_val = float(min_input)
                    if 80 <= min_val <= 250:
                        self.MIN_DISTANCE = min_val
                    else:
                        print("   ‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–∂–¥—É 80 –∏ 250 –º–º")
                        continue
                
                max_input = input(f"   –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é {self.MAX_DISTANCE} –º–º): ").strip()
                if max_input:
                    max_val = float(max_input)
                    if 80 <= max_val <= 250:
                        self.MAX_DISTANCE = max_val
                    else:
                        print("   ‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–∂–¥—É 80 –∏ 250 –º–º")
                        continue
                
                if self.MIN_DISTANCE >= self.MAX_DISTANCE:
                    print("   ‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ")
                    continue
                
                print(f"   ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–∏–∞–ø–∞–∑–æ–Ω: {self.MIN_DISTANCE}-{self.MAX_DISTANCE} –º–º")
                return True
                
            except ValueError:
                print("   ‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
            except KeyboardInterrupt:
                return False

    def plot_measurements(self, filepath):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
        try:
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
            distances = []
            point_numbers = []
            timestamps = []
            
            with open(filepath, 'r', encoding='utf-8') as f:
                reader = csv.reader(f, delimiter=';')
                next(reader)  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                for row in reader:
                    if row:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è
                        distances.append(float(row[0]))
                        point_numbers.append(int(row[1]))
                        timestamps.append(float(row[2]))
            
            if not distances:
                print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤")
                return
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
            data_min = min(distances)
            data_max = max(distances)
            margin = (data_max - data_min) * 0.1  # 10% –æ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö
            
            y_min = max(80, data_min - margin)  # –ù–µ –Ω–∏–∂–µ 80 –º–º
            y_max = min(250, data_max + margin)  # –ù–µ –≤—ã—à–µ 250 –º–º
            
            # –°–æ–∑–¥–∞–µ–º –¥–≤–∞ –≥—Ä–∞—Ñ–∏–∫–∞
            plt.figure(figsize=(15, 6))
            
            # –ì—Ä–∞—Ñ–∏–∫ 1: –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ vs –ù–æ–º–µ—Ä —Ç–æ—á–∫–∏
            plt.subplot(1, 2, 1)
            plt.plot(point_numbers, distances, 'b-', linewidth=0.5)
            plt.xlabel('–ù–æ–º–µ—Ä —Ç–æ—á–∫–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è')
            plt.ylabel('–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–º–º)')
            plt.title('–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ vs –ù–æ–º–µ—Ä —Ç–æ—á–∫–∏')
            plt.grid(True, alpha=0.3)
            plt.ylim(y_min, y_max)
            
            # –ì—Ä–∞—Ñ–∏–∫ 2: –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ vs –í—Ä–µ–º—è
            plt.subplot(1, 2, 2)
            plt.plot(timestamps, distances, 'r-', linewidth=0.5)
            plt.xlabel('–í—Ä–µ–º—è (—Å–µ–∫)')
            plt.ylabel('–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–º–º)')
            plt.title('–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ vs –í—Ä–µ–º—è')
            plt.grid(True, alpha=0.3)
            plt.ylim(y_min, y_max)
            
            plt.tight_layout()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
            plot_filename = os.path.join(os.path.dirname(filepath), 'plot.png')
            plt.savefig(plot_filename, dpi=300, bbox_inches='tight')
            print(f"üìä –ì—Ä–∞—Ñ–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∫–∞–∫: {plot_filename}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
            plt.show()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤: {e}")

    def continuous_ultra_fast_logging(self):
        """
        –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è —É–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä–∞—è –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —á–∞—Å—Ç–æ—Ç—ã –∏ —Ç–∞–π–º–∞—É—Ç–æ–º
        """
        # –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∑–∞–ø–∏—Å–∏
        if not self.reconnect():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –¥–∞—Ç—á–∏–∫—É")
            return False
            
        # –ò–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        if not self.identify_device():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
            self.close()
            return False
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not os.path.exists(self.data_dir):
            os.makedirs(self.data_dir)
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
        experiment_name = f"experiment_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}"
        experiment_dir = self.create_experiment_directory(experiment_name)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–ø–∫–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
        filename = "data.csv"
        filepath = os.path.join(experiment_dir, filename)
        
        print(f"üì° –ó–∞–ø—É—Å–∫ —É–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä–æ–π –∑–∞–ø–∏—Å–∏...")
        print(f"üìÅ –ü–∞–ø–∫–∞ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞: {experiment_dir}")
        print(f"üíæ –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö: {filepath}")
        print(f"üìä –î–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: {self.MIN_DISTANCE}-{self.MAX_DISTANCE} –º–º")
        print(f"üéØ –¶–µ–ª–µ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞: {self.TARGET_FREQUENCY} –ì—Ü")
        print(f"‚è∞ –¢–∞–π–º–∞—É—Ç: {self.TIMEOUT_DURATION} —Å–µ–∫ –±–µ–∑ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        print("üéÆ –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        print("-" * 50)
        
        # –°–æ–∑–¥–∞–µ–º CSV —Ñ–∞–π–ª —Å —Ç—Ä–µ–º—è —Å—Ç–æ–ª–±—Ü–∞–º–∏
        with open(filepath, 'w', newline='', encoding='utf-8') as f:
            writer = csv.writer(f, delimiter=';')
            writer.writerow(['–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ_–º–º', '–ù–æ–º–µ—Ä_—Ç–æ—á–∫–∏', '–í—Ä–µ–º–µ–Ω–Ω–∞—è_–º–µ—Ç–∫–∞'])
        
        self.is_running = True
        start_time = time.perf_counter()
        last_valid_measurement_time = start_time  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è
        last_print_time = start_time
        measurements_count_since_last_print = 0
        invalid_measurements = 0  # –°—á–µ—Ç—á–∏–∫ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π
        
        # –î–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —á–∞—Å—Ç–æ—Ç—ã
        measurement_interval = 1.0 / self.TARGET_FREQUENCY
        
        # –ë—É—Ñ–µ—Ä –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é –≤ —Ñ–∞–π–ª
        data_buffer = []
        buffer_size = 100  # –†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞
        
        timeout_occurred = False
        success = False
        
        try:
            while self.is_running:
                loop_start = time.perf_counter()
                current_time = time.perf_counter()
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ - –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 1.5 —Å–µ–∫—É–Ω–¥ –±–µ–∑ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                if current_time - last_valid_measurement_time > self.TIMEOUT_DURATION:
                    print(f"‚ùå –¢–ê–ô–ú–ê–£–¢: –ù–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –±–æ–ª–µ–µ {self.TIMEOUT_DURATION} —Å–µ–∫—É–Ω–¥!")
                    timeout_occurred = True
                    break
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏–µ
                measurement = self.get_measurement_ultra_fast()
                elapsed_time = current_time - start_time
                
                if measurement is not None:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è
                    last_valid_measurement_time = current_time
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä
                    data_buffer.append([
                        f"{measurement:.3f}", 
                        self.measurement_count, 
                        f"{elapsed_time:.6f}"
                    ])
                    
                    self.measurement_count += 1
                    measurements_count_since_last_print += 1
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±—É—Ñ–µ—Ä–∞
                    if len(data_buffer) >= buffer_size:
                        with open(filepath, 'a', newline='', encoding='utf-8') as f:
                            writer = csv.writer(f, delimiter=';')
                            writer.writerows(data_buffer)
                        data_buffer = []
                    
                    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 0.5 —Å–µ–∫—É–Ω–¥—ã
                    if current_time - last_print_time >= 0.5:
                        elapsed = current_time - last_print_time
                        frequency = measurements_count_since_last_print / elapsed
                        print(f"üìä #{self.measurement_count}: {measurement:.3f} –º–º | –ß–∞—Å—Ç–æ—Ç–∞: {frequency:.0f} –ì—Ü | –û—Ç–±—Ä–æ—à–µ–Ω–æ: {invalid_measurements}")
                        last_print_time = current_time
                        measurements_count_since_last_print = 0
                        invalid_measurements = 0
                else:
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π
                    invalid_measurements += 1
                
                # –ö–æ–Ω—Ç—Ä–æ–ª—å —á–∞—Å—Ç–æ—Ç—ã - –≤—ã–¥–µ—Ä–∂–∏–≤–∞–µ–º –Ω—É–∂–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∏–∑–º–µ—Ä–µ–Ω–∏—è–º–∏
                elapsed_loop = time.perf_counter() - loop_start
                sleep_time = measurement_interval - elapsed_loop
                if sleep_time > 0:
                    time.sleep(sleep_time)
                    
        except KeyboardInterrupt:
            print(f"\n‚èπ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            success = True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        finally:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–∞–Ω–Ω—ã–µ –≤ –±—É—Ñ–µ—Ä–µ
            if data_buffer and not timeout_occurred:
                with open(filepath, 'a', newline='', encoding='utf-8') as f:
                    writer = csv.writer(f, delimiter=';')
                    writer.writerows(data_buffer)
            
            total_time = time.perf_counter() - start_time
            
            if timeout_occurred:
                # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ
                try:
                    os.remove(filepath)
                    print(f"üóëÔ∏è –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω –∏–∑-–∑–∞ —Ç–∞–π–º–∞—É—Ç–∞: {filepath}")
                except Exception as e:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª: {e}")
                
                print(f"\n‚ùå –ó–ê–í–ï–†–®–ï–ù–û –ü–û –¢–ê–ô–ú–ê–£–¢–£:")
                print(f"   ‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.1f} —Å–µ–∫")
                print(f"   üìà –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π: {self.measurement_count}")
                print(f"   üö´ –ù–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –±–æ–ª–µ–µ {self.TIMEOUT_DURATION} —Å–µ–∫—É–Ω–¥")
                print(f"   üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–ø–∏—Å—å –∑–∞–Ω–æ–≤–æ")
            else:
                avg_frequency = self.measurement_count / total_time if total_time > 0 else 0
                print(f"\n‚úÖ –ò—Ç–æ–≥–∏ –∑–∞–ø–∏—Å–∏:")
                print(f"   üìà –í—Å–µ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π: {self.measurement_count}")
                print(f"   ‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.1f} —Å–µ–∫")
                print(f"   üìä –°—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç–æ—Ç–∞: {avg_frequency:.1f} –ì—Ü")
                print(f"   üéØ –¶–µ–ª–µ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞: {self.TARGET_FREQUENCY} –ì—Ü")
                print(f"   üìè –î–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: {self.MIN_DISTANCE}-{self.MAX_DISTANCE} –º–º")
                print(f"   üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {filepath}")
                
                # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫–∏ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç —Ç–∞–π–º–∞—É—Ç–∞
                if self.measurement_count > 0:
                    print("üìä –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫–∏...")
                    self.plot_measurements(filepath)
                    success = True
            
            # –í—Å–µ–≥–¥–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            self.close()
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
            self.measurement_count = 0
            
            return success

    def test_performance(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º"""
        # –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ç–µ—Å—Ç–∞
        if not self.reconnect():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –¥–∞—Ç—á–∏–∫—É")
            return False
            
        # –ò–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        if not self.identify_device():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
            self.close()
            return False
            
        print("üöÄ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        test_duration = 5
        print(f"–ò–∑–º–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ {test_duration} —Å–µ–∫—É–Ω–¥...")
        print(f"–£—á–∏—Ç—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è {self.MIN_DISTANCE}-{self.MAX_DISTANCE} –º–º")
        print(f"–¶–µ–ª–µ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞: {self.TARGET_FREQUENCY} –ì—Ü")
        
        start_time = time.perf_counter()
        count = 0
        invalid_count = 0
        
        # –î–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —á–∞—Å—Ç–æ—Ç—ã –≤ —Ç–µ—Å—Ç–µ
        measurement_interval = 1.0 / self.TARGET_FREQUENCY
        
        try:
            while time.perf_counter() - start_time < test_duration:
                loop_start = time.perf_counter()
                
                measurement = self.get_measurement_ultra_fast()
                if measurement is not None:
                    count += 1
                else:
                    invalid_count += 1
                
                # –ö–æ–Ω—Ç—Ä–æ–ª—å —á–∞—Å—Ç–æ—Ç—ã
                elapsed_loop = time.perf_counter() - loop_start
                sleep_time = measurement_interval - elapsed_loop
                if sleep_time > 0:
                    time.sleep(sleep_time)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞: {e}")
        finally:
            total_time = time.perf_counter() - start_time
            frequency = count / total_time
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞:")
            print(f"   ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π: {count}")
            print(f"   ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π: {invalid_count}")
            print(f"   ‚è±Ô∏è –í—Ä–µ–º—è: {total_time:.2f} —Å–µ–∫")
            print(f"   üìä –ß–∞—Å—Ç–æ—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {frequency:.1f} –ì—Ü")
            print(f"   üéØ –¶–µ–ª–µ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞: {self.TARGET_FREQUENCY} –ì—Ü")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞
            self.close()
            
            return count > 0

def select_port():
    """–†—É—á–Ω–æ–π –≤—ã–±–æ—Ä COM-–ø–æ—Ä—Ç–∞"""
    ports = serial.tools.list_ports.comports()
    if not ports:
        print("‚ùå COM-–ø–æ—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return None
    
    print("\nüì° –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ—Ä—Ç—ã:")
    for i, port in enumerate(ports):
        print(f"   {i+1}. {port.device} - {port.description}")
    
    while True:
        try:
            choice = input(f"\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä—Ç (1-{len(ports)}): ").strip()
            if choice.isdigit():
                port_index = int(choice) - 1
                if 0 <= port_index < len(ports):
                    selected_port = ports[port_index].device
                    print(f"‚úÖ –í—ã–±—Ä–∞–Ω –ø–æ—Ä—Ç: {selected_port}")
                    return selected_port
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except KeyboardInterrupt:
            return None

def select_baudrate():
    """–†—É—á–Ω–æ–π –≤—ã–±–æ—Ä —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥–∞—á–∏ —Å 921600 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    baudrates = [9600, 19200, 38400, 57600, 115200, 230400, 460800, 921600]
    default_baudrate = 921600
    
    print("\n‚ö° –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥–∞—á–∏:")
    for i, baud in enumerate(baudrates):
        default_mark = " (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)" if baud == default_baudrate else ""
        print(f"   {i+1}. {baud}{default_mark}")
    
    while True:
        try:
            choice = input(f"\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å (1-{len(baudrates)}, Enter –¥–ª—è {default_baudrate}): ").strip()
            if not choice:  # –ü—É—Å—Ç–æ–π –≤–≤–æ–¥ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_baudrate}")
                return default_baudrate
            elif choice.isdigit():
                baud_index = int(choice) - 1
                if 0 <= baud_index < len(baudrates):
                    selected_baudrate = baudrates[baud_index]
                    print(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å: {selected_baudrate}")
                    return selected_baudrate
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except KeyboardInterrupt:
            return None

def main():
    print("–†–§603 Ultra-Fast Data Logger - –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è")
    print("=" * 60)
    
    logger = RF603UltraFastLogger()
    
    # –í—ã–±–æ—Ä –ø–æ—Ä—Ç–∞
    selected_port = select_port()
    if not selected_port:
        return
    
    # –í—ã–±–æ—Ä —Å–∫–æ—Ä–æ—Å—Ç–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 921600)
    selected_baudrate = select_baudrate()
    if not selected_baudrate:
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    logger.selected_port = selected_port
    logger.selected_baudrate = selected_baudrate
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
    if not logger.set_distance_limits():
        return
    
    while True:
        print("\n" + "="*50)
        print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1. üöÄ –ó–∞–ø—É—Å–∫ —É–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä–æ–π –∑–∞–ø–∏—Å–∏ (2000 –ì—Ü)")
        print("2. üìä –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (5 —Å–µ–∫)")
        print("3. üìè –ò–∑–º–µ–Ω–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é")
        print("4. ‚ùå –í—ã—Ö–æ–¥")
        
        choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-4): ").strip()
        
        if choice == '1':
            # –ó–∞–ø—É—Å–∫–∞–µ–º —É–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä—É—é –∑–∞–ø–∏—Å—å
            success = logger.continuous_ultra_fast_logging()
            if not success:
                print("‚ùå –ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π. –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ.")
            else:
                print("‚úÖ –ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ. –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ.")
                
        elif choice == '2':
            # –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            success = logger.test_performance()
            if not success:
                print("‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π. –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ.")
            else:
                print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ. –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ.")
                        
        elif choice == '3':
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
            logger.set_distance_limits()
            
        elif choice == '4':
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

if __name__ == "__main__":
    main()
