# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –¥–∞—Ç—á–∏–∫—É RF603HS
"""

import serial
import serial.tools.list_ports
import time
import sys

def test_port(port, baudrate):
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–æ—Ä—Ç—É"""
    try:
        print(f"\n{'='*60}")
        print(f"–¢–µ—Å—Ç –ø–æ—Ä—Ç–∞: {port} –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ {baudrate} –±–æ–¥")
        print('='*60)

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ä—Ç
        ser = serial.Serial(
            port=port,
            baudrate=baudrate,
            bytesize=serial.EIGHTBITS,
            parity=serial.PARITY_EVEN,
            stopbits=serial.STOPBITS_ONE,
            timeout=2
        )

        print("‚úÖ –ü–æ—Ä—Ç –æ—Ç–∫—Ä—ã—Ç —É—Å–ø–µ—à–Ω–æ")
        time.sleep(0.5)

        # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä—ã
        ser.reset_input_buffer()
        ser.reset_output_buffer()
        print("‚úÖ –ë—É—Ñ–µ—Ä—ã –æ—á–∏—â–µ–Ω—ã")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        request = bytes([0x01, 0x81])  # –ê–¥—Ä–µ—Å 1, –∑–∞–ø—Ä–æ—Å 01h
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {request.hex()}")
        ser.write(request)

        time.sleep(0.2)

        # –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç
        response = ser.read(16)
        print(f"üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç ({len(response)} –±–∞–π—Ç): {response.hex()}")

        if len(response) >= 16:
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
            base_low = (response[8] & 0x0F) | ((response[9] & 0x0F) << 4)
            base_high = (response[10] & 0x0F) | ((response[11] & 0x0F) << 4)
            base_distance = (base_high << 8) | base_low

            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
            range_low = (response[12] & 0x0F) | ((response[13] & 0x0F) << 4)
            range_high = (response[14] & 0x0F) | ((response[15] & 0x0F) << 4)
            measurement_range = (range_high << 8) | range_low

            print("\n" + "="*60)
            print("–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –î–ê–¢–ß–ò–ö–ï:")
            print("="*60)
            print(f"–ë–∞–∑–æ–≤–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {base_distance} –º–º")
            print(f"–î–∏–∞–ø–∞–∑–æ–Ω –∏–∑–º–µ—Ä–µ–Ω–∏—è: {measurement_range} –º–º")
            print("="*60)

            # –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è
            print("\n–¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏—è...")
            request_measure = bytes([0x01, 0x86])  # –ó–∞–ø—Ä–æ—Å 06h
            ser.write(request_measure)

            time.sleep(0.1)

            measure_response = ser.read(4)
            print(f"üì• –û—Ç–≤–µ—Ç –∏–∑–º–µ—Ä–µ–Ω–∏—è ({len(measure_response)} –±–∞–π—Ç): {measure_response.hex()}")

            if len(measure_response) >= 4:
                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                low_byte = (measure_response[0] & 0x0F) | ((measure_response[1] & 0x0F) << 4)
                high_byte = (measure_response[2] & 0x0F) | ((measure_response[3] & 0x0F) << 4)
                raw_value = (high_byte << 8) | low_byte

                distance_mm = (raw_value * measurement_range) / 0x4000
                print(f"üìè –ò–∑–º–µ—Ä–µ–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance_mm:.3f} –º–º")

                print("\n‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
                ser.close()
                return True

        print("\n‚ùå –î–∞—Ç—á–∏–∫ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        ser.close()
        return False

    except serial.SerialException as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Ä—Ç–æ–º: {e}")
        return False
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("="*70)
    print(" "*15 + "RF603HS CONNECTION TEST")
    print("="*70)

    # –°–ø–∏—Å–æ–∫ –ø–æ—Ä—Ç–æ–≤
    ports = list(serial.tools.list_ports.comports())

    if not ports:
        print("\n‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö COM-–ø–æ—Ä—Ç–æ–≤!")
        return

    print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ COM-–ø–æ—Ä—Ç—ã:")
    print("-"*70)
    for i, port in enumerate(ports, 1):
        print(f"{i}. {port.device}")
        print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {port.description}")
        print(f"   HWID: {port.hwid}")
        print("-"*70)

    # –í—ã–±–æ—Ä –ø–æ—Ä—Ç–∞
    try:
        choice = int(input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä—Ç (1-{len(ports)}): "))
        if choice < 1 or choice > len(ports):
            raise ValueError

        selected_port = ports[choice - 1].device

    except (ValueError, IndexError):
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
        return

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–∫–æ—Ä–æ—Å—Ç–∏
    print("\n" + "="*70)
    print("–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ö–û–†–û–°–¢–ï–ô")
    print("="*70)

    baudrates = [9600, 19200, 57600, 115200, 460800]
    success = False

    for baudrate in baudrates:
        if test_port(selected_port, baudrate):
            success = True
            print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ {baudrate} –±–æ–¥")
            break
        else:
            print(f"\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ {baudrate} –±–æ–¥")
            time.sleep(0.5)

    if not success:
        print("\n" + "="*70)
        print("‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –ü–û–î–ö–õ–Æ–ß–ò–¢–¨–°–Ø –ù–ò –ù–ê –û–î–ù–û–ô –°–ö–û–†–û–°–¢–ò")
        print("="*70)
        print("\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("1. –î–∞—Ç—á–∏–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏–ª–∏ –Ω–µ –≤–∫–ª—é—á–µ–Ω")
        print("2. –ù–µ–≤–µ—Ä–Ω—ã–π COM-–ø–æ—Ä—Ç")
        print("3. –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–∞–±–µ–ª–µ–º")
        print("4. –î–∞—Ç—á–∏–∫ —Ç—Ä–µ–±—É–µ—Ç –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É")
        print("\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
        print("- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∏—Ç–∞–Ω–∏–µ –¥–∞—Ç—á–∏–∫–∞ (9-36–í)")
        print("- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–≤–æ–¥–æ–≤")
        print("- –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–∞—Ç—á–∏–∫")
        print("- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –æ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

    print("\n" + "="*70)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print("="*70)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
