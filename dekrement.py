# -*- coding: utf-8 -*-
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import os
from scipy.signal import find_peaks, savgol_filter, argrelextrema
import tkinter as tk
from tkinter import filedialog, messagebox
from scipy.optimize import curve_fit

class RF603OscillationAnalyzer:
    def __init__(self):
        self.data = None
        self.processed_data = None
        self.original_processed_data = None
        self.oscillation_start = 0
        self.oscillation_end = 0
        self.corrected_peaks = None
        self.current_period = None
        self.current_frequency = None
        self.log_decrement = None  # –õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏–π –¥–µ–∫—Ä–µ–º–µ–Ω—Ç
        self.loss_factor = None   # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–æ—Ç–µ—Ä—å
        self.damping_ratio = None # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–µ–º–ø—Ñ–∏—Ä–æ–≤–∞–Ω–∏—è
        
    def load_csv(self, filename):
        """–ó–∞–≥—Ä—É–∑–∫–∞ CSV —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏"""
        try:
            self.data = pd.read_csv(filename, delimiter=';', encoding='utf-8')
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑: {filename}")
            print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.data)} —Å—Ç—Ä–æ–∫")
            print(f"üìè –î–∏–∞–ø–∞–∑–æ–Ω —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π: {self.data['–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ_–º–º'].min():.3f} - {self.data['–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ_–º–º'].max():.3f} –º–º")
            print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {self.data['–í—Ä–µ–º–µ–Ω–Ω–∞—è_–º–µ—Ç–∫–∞'].iloc[-1]:.3f} —Å–µ–∫")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            return False
    
    def normalize_data(self):
        """–ù–æ—Ä–º–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö - –≤—ã—á–∏—Ç–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è"""
        if self.data is None:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return False
            
        try:
            self.processed_data = self.data.copy()
            
            # 1. –í—ã—á–∏—Ç–∞–µ–º –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –≤—Å–µ—Ö —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
            first_distance = self.processed_data.iloc[0]['–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ_–º–º']
            self.processed_data['–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ_–Ω–æ—Ä–º'] = (
                self.processed_data['–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ_–º–º'] - first_distance
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –Ω–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            self.original_processed_data = self.processed_data.copy()
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–∏–∫–∏ –ø—Ä–∏ –Ω–æ—Ä–º–∏—Ä–æ–≤–∫–µ
            self.corrected_peaks = None
            self.current_period = None
            self.current_frequency = None
            self.log_decrement = None
            self.loss_factor = None
            self.damping_ratio = None
            
            print(f"‚úÖ –ù–æ—Ä–º–∏—Ä–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –ü–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {first_distance:.3f} –º–º")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∏—Ä–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False

    def reset_to_original(self):
        """–°–±—Ä–æ—Å –∫ –∏—Å—Ö–æ–¥–Ω—ã–º –Ω–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º"""
        if self.original_processed_data is not None:
            self.processed_data = self.original_processed_data.copy()
            self.oscillation_start = 0
            self.oscillation_end = len(self.processed_data) - 1
            
            # –°–ë–†–ê–°–´–í–ê–ï–ú –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–∏–∫–∏ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö
            self.corrected_peaks = None
            self.current_period = None
            self.current_frequency = None
            self.log_decrement = None
            self.loss_factor = None
            self.damping_ratio = None
            
            print("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∏—Å—Ö–æ–¥–Ω—ã–º –Ω–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º")
            return True
        else:
            print("‚ùå –ù–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–±—Ä–æ—Å–∞")
            return False

    def crop_by_time(self, start_time, end_time):
        """–û–±—Ä–µ–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—Ä–µ–º–µ–Ω–∏"""
        if self.processed_data is None:
            print("‚ùå –ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            return False
            
        try:
            # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            start_mask = self.processed_data['–í—Ä–µ–º–µ–Ω–Ω–∞—è_–º–µ—Ç–∫–∞'] >= start_time
            end_mask = self.processed_data['–í—Ä–µ–º–µ–Ω–Ω–∞—è_–º–µ—Ç–∫–∞'] <= end_time
            
            if not any(start_mask) or not any(end_mask):
                print("‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö")
                return False
                
            start_idx = self.processed_data[start_mask].index[0]
            end_idx = self.processed_data[end_mask].index[-1]
            
            return self.crop_by_points(start_idx, end_idx)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–µ–∑–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏: {e}")
            return False

    def crop_by_points(self, start_point, end_point):
        """–û–±—Ä–µ–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–æ—á–∫–∞–º"""
        if self.processed_data is None:
            print("‚ùå –ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            return False
            
        try:
            start_idx = max(0, min(start_point, len(self.processed_data) - 1))
            end_idx = max(start_idx + 1, min(end_point, len(self.processed_data) - 1))
            
            original_count = len(self.processed_data)
            self.processed_data = self.processed_data.iloc[start_idx:end_idx + 1].reset_index(drop=True)
            self.oscillation_start = start_idx
            self.oscillation_end = end_idx
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–∏–∫–∏ –ø—Ä–∏ –æ–±—Ä–µ–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö
            self.corrected_peaks = None
            self.current_period = None
            self.current_frequency = None
            self.log_decrement = None
            self.loss_factor = None
            self.damping_ratio = None
            
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±—Ä–µ–∑–∞–Ω—ã:")
            print(f"   üìç –¢–æ—á–∫–∏: {start_idx}-{end_idx}")
            print(f"   ‚è±Ô∏è –í—Ä–µ–º—è: {self.processed_data['–í—Ä–µ–º–µ–Ω–Ω–∞—è_–º–µ—Ç–∫–∞'].iloc[0]:.3f}-{self.processed_data['–í—Ä–µ–º–µ–Ω–Ω–∞—è_–º–µ—Ç–∫–∞'].iloc[-1]:.3f} —Å–µ–∫")
            print(f"   üìä –¢–æ—á–µ–∫ –¥–æ: {original_count}")
            print(f"   üìä –¢–æ—á–µ–∫ –ø–æ—Å–ª–µ: {len(self.processed_data)}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–µ–∑–∫–∏ –ø–æ —Ç–æ—á–∫–∞–º: {e}")
            return False

    def find_release_point(self, threshold=0.5):
        """
        –ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –º–æ–º–µ–Ω—Ç–∞ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
        –ò—â–µ–º —Ä–µ–∑–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è (–Ω–∞—á–∞–ª–æ –∫–æ–ª–µ–±–∞–Ω–∏–π)
        """
        if self.processed_data is None:
            return 0
            
        distances = self.processed_data['–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ_–Ω–æ—Ä–º'].values
        
        # –ò—â–µ–º —Ç–æ—á–∫—É, –≥–¥–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–∑–∫–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        for i in range(1, len(distances) - 10):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —É—á–∞—Å—Ç–∫–µ
            window = distances[i:i+10]
            if np.max(window) - np.min(window) > threshold:
                release_point = max(0, i - 5)  # –ù–µ–º–Ω–æ–≥–æ –æ—Ç—Å—Ç—É–ø–∞–µ–º –Ω–∞–∑–∞–¥
                print(f"üìç –ù–∞—á–∞–ª–æ –∫–æ–ª–µ–±–∞–Ω–∏–π –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–æ—á–∫–µ {release_point}")
                return release_point
        
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∞—á–∞–ª–æ –∫–æ–ª–µ–±–∞–Ω–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        return 0

    def auto_crop_oscillations(self, duration_after_start=1.0):
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∫–æ–ª–µ–±–∞–Ω–∏–π –∏ –æ–±—Ä–µ–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        duration_after_start: –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –∫–æ–ª–µ–±–∞–Ω–∏–π (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
        """
        if self.processed_data is None:
            print("‚ùå –ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            return False, None, None, None
            
        try:
            # –°–Ω–∞—á–∞–ª–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫ –∏—Å—Ö–æ–¥–Ω—ã–º –¥–∞–Ω–Ω—ã–º
            self.reset_to_original()
            
            # –ù–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª–æ –∫–æ–ª–µ–±–∞–Ω–∏–π
            start_idx = self.find_release_point(threshold=0.5)
            if start_idx == 0:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∞—á–∞–ª–æ –∫–æ–ª–µ–±–∞–Ω–∏–π")
                return False, None, None, None
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –Ω–∞—á–∞–ª–∞ –∫–æ–ª–µ–±–∞–Ω–∏–π
            start_time = self.processed_data.iloc[start_idx]['–í—Ä–µ–º–µ–Ω–Ω–∞—è_–º–µ—Ç–∫–∞']
            end_time = start_time + duration_after_start
            
            print(f"üìç –ù–∞—á–∞–ª–æ –∫–æ–ª–µ–±–∞–Ω–∏–π: {start_time:.3f} —Å–µ–∫")
            print(f"üìç –ö–æ–Ω–µ—Ü –æ–±—Ä–µ–∑–∫–∏: {end_time:.3f} —Å–µ–∫")
            print(f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞: {duration_after_start} —Å–µ–∫")
            
            # –û–±—Ä–µ–∑–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –Ω–∞—á–∞–ª–∞ –∫–æ–ª–µ–±–∞–Ω–∏–π –¥–æ start_time + duration_after_start
            if not self.crop_by_time(start_time, end_time):
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–µ–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—Ä–µ–º–µ–Ω–∏")
                return False, None, None, None
            
            # –°—Ä–∞–∑—É —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥ –∏ —á–∞—Å—Ç–æ—Ç—É
            period, frequency, peaks = self.calculate_period_frequency_improved()
            
            return True, period, frequency, peaks
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–µ–∑–∫–∏: {e}")
            return False, None, None, None

    def calculate_logarithmic_decrement(self, peaks):
        """
        –†–∞—Å—á–µ—Ç –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–∫—Ä–µ–º–µ–Ω—Ç–∞ –∑–∞—Ç—É—Ö–∞–Ω–∏—è –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –ø–æ—Ç–µ—Ä—å
        —Å–æ–≥–ª–∞—Å–Ω–æ –º–µ—Ç–æ–¥–∏–∫–µ –∏–∑ –¥–∏—Å—Å–µ—Ä—Ç–∞—Ü–∏–∏ (—Ä–∞–∑–¥–µ–ª 3.2)
        """
        if peaks is None or len(peaks) < 2:
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–∫—Ä–µ–º–µ–Ω—Ç–∞")
            return None, None, None
            
        try:
            distances = self.processed_data['–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ_–Ω–æ—Ä–º'].values
            timestamps = self.processed_data['–í—Ä–µ–º–µ–Ω–Ω–∞—è_–º–µ—Ç–∫–∞'].values
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–º–ø–ª–∏—Ç—É–¥—ã –≤ –ø–∏–∫–∞—Ö
            amplitudes = distances[peaks]
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏–π –¥–µ–∫—Ä–µ–º–µ–Ω—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∏–∫–æ–≤
            decrements = []
            for i in range(len(peaks) - 1):
                A_i = abs(amplitudes[i])
                A_i_plus_1 = abs(amplitudes[i + 1])
                
                if A_i_plus_1 > 0:  # –ò–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
                    delta = np.log(A_i / A_i_plus_1)
                    decrements.append(delta)
            
            if not decrements:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏–π –¥–µ–∫—Ä–µ–º–µ–Ω—Ç")
                return None, None, None
            
            # –°—Ä–µ–¥–Ω–∏–π –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏–π –¥–µ–∫—Ä–µ–º–µ–Ω—Ç
            avg_decrement = np.mean(decrements)
            
            # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–µ–º–ø—Ñ–∏—Ä–æ–≤–∞–Ω–∏—è (—Ñ–æ—Ä–º—É–ª–∞ 3.2 –∏–∑ –¥–∏—Å—Å–µ—Ä—Ç–∞—Ü–∏–∏)
            damping_ratio = avg_decrement / np.sqrt(4 * np.pi**2 + avg_decrement**2)
            
            # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–æ—Ç–µ—Ä—å (—Ñ–æ—Ä–º—É–ª–∞ 3.3 –∏–∑ –¥–∏—Å—Å–µ—Ä—Ç–∞—Ü–∏–∏)
            loss_factor = 2 * damping_ratio
            
            print(f"üìâ –õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏–π –¥–µ–∫—Ä–µ–º–µ–Ω—Ç (Œ¥): {avg_decrement:.6f}")
            print(f"üìâ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–µ–º–ø—Ñ–∏—Ä–æ–≤–∞–Ω–∏—è (Œ∂): {damping_ratio:.6f}")
            print(f"üìâ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–æ—Ç–µ—Ä—å (Œ∑): {loss_factor:.6f}")
            print(f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–∞—Ä –ø–∏–∫–æ–≤: {len(decrements)}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.log_decrement = avg_decrement
            self.damping_ratio = damping_ratio
            self.loss_factor = loss_factor
            
            return avg_decrement, damping_ratio, loss_factor
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–∫—Ä–µ–º–µ–Ω—Ç–∞: {e}")
            return None, None, None

    def calculate_period_frequency_improved(self):
        """
        –£–õ–£–ß–®–ï–ù–ù–´–ô —Ä–∞—Å—á–µ—Ç –ø–µ—Ä–∏–æ–¥–∞ –∏ —á–∞—Å—Ç–æ—Ç—ã —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        """
        if self.processed_data is None:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return None, None, None
            
        try:
            distances = self.processed_data['–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ_–Ω–æ—Ä–º'].values
            timestamps = self.processed_data['–í—Ä–µ–º–µ–Ω–Ω–∞—è_–º–µ—Ç–∫–∞'].values
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–∏–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
            if self.corrected_peaks is not None and len(self.corrected_peaks) >= 2:
                print("üìä –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–∏–∫–∏")
                peaks = self.corrected_peaks
            else:
                # –ò–Ω–∞—á–µ –∏—â–µ–º –ø–∏–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è —à—É–º–æ–≤
                if len(distances) > 11:
                    distances_smooth = savgol_filter(distances, 11, 3)
                else:
                    distances_smooth = distances
                
                # –ê–î–ê–ü–¢–ò–í–ù–û–ï –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞ –ø–∏–∫–æ–≤
                amplitude = np.max(distances_smooth) - np.min(distances_smooth)
                
                # –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø–æ–∏—Å–∫–∞ –ø–∏–∫–æ–≤
                peaks = self._find_peaks_adaptive(distances_smooth, amplitude)
            
            if len(peaks) < 2:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∏–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                return None, None, None
            
            print(f"üìà –ù–∞–π–¥–µ–Ω–æ –ø–∏–∫–æ–≤: {len(peaks)}")
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥—ã –º–µ–∂–¥—É –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∏–∫–∞–º–∏
            periods = []
            for i in range(len(peaks) - 1):
                period = timestamps[peaks[i + 1]] - timestamps[peaks[i]]
                periods.append(period)
                print(f"   –ü–µ—Ä–∏–æ–¥ {i+1}: {period:.6f} —Å–µ–∫")
            
            # –£–õ–£–ß–®–ï–ù–ù–ê–Ø —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤—ã–±—Ä–æ—Å–æ–≤
            if len(periods) >= 3:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–∂–∫–≤–∞—Ä—Ç–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–∞—Ö –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤—ã–±—Ä–æ—Å–æ–≤
                Q1 = np.percentile(periods, 25)
                Q3 = np.percentile(periods, 75)
                IQR = Q3 - Q1
                lower_bound = Q1 - 1.5 * IQR
                upper_bound = Q3 + 1.5 * IQR
                
                filtered_periods = [p for p in periods if lower_bound <= p <= upper_bound]
            else:
                filtered_periods = periods
            
            if not filtered_periods:
                print("‚ö†Ô∏è –í—Å–µ –ø–µ—Ä–∏–æ–¥—ã –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≤—ã–±—Ä–æ—Å—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ")
                filtered_periods = periods
                
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥ –∏ —á–∞—Å—Ç–æ—Ç—É
            avg_period = np.mean(filtered_periods)
            frequency = 1.0 / avg_period if avg_period > 0 else 0
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            self.current_period = avg_period
            self.current_frequency = frequency
            
            print(f"‚è±Ô∏è –°—Ä–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥: {avg_period:.6f} —Å–µ–∫")
            print(f"üìä –ß–∞—Å—Ç–æ—Ç–∞: {frequency:.2f} –ì—Ü")
            print(f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–µ—Ä–∏–æ–¥–æ–≤: {len(filtered_periods)} –∏–∑ {len(periods)}")
            
            # –†–ê–°–ß–ï–¢ –õ–û–ì–ê–†–ò–§–ú–ò–ß–ï–°–ö–û–ì–û –î–ï–ö–†–ï–ú–ï–ù–¢–ê
            self.calculate_logarithmic_decrement(peaks)
            
            return avg_period, frequency, peaks
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")
            return None, None, None

    def _find_peaks_adaptive(self, signal, amplitude):
        """
        –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ø–∏–∫–æ–≤ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
        """
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–∏—Å–∫ –ø–∏–∫–æ–≤
        try:
            peaks, properties = find_peaks(
                signal,
                height=amplitude * 0.1,  # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –≤—ã—Å–æ—Ç–∞
                distance=max(3, len(signal) // 20),  # –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
                prominence=amplitude * 0.05,  # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –≤—ã—Å—Ç—É–ø–∞–µ–º–æ—Å—Ç—å
                width=2
            )
            
            if len(peaks) >= 3:
                print("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è 1 (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è)")
                return peaks
        except:
            pass
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ø–æ–∏—Å–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–∞–∫—Å–∏–º—É–º–æ–≤
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —ç–∫—Å—Ç—Ä–µ–º—É–º—ã
            peaks = argrelextrema(signal, np.greater, order=3)[0]
            
            if len(peaks) >= 3:
                print("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è 2 (–ª–æ–∫–∞–ª—å–Ω—ã–µ –º–∞–∫—Å–∏–º—É–º—ã)")
                return peaks
        except:
            pass
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –º–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        try:
            peaks, properties = find_peaks(
                signal,
                height=amplitude * 0.05,
                distance=2,
                prominence=amplitude * 0.02
            )
            
            if len(peaks) >= 2:
                print("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è 3 (–º–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–∞—è)")
                return peaks
        except:
            pass
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 4: –ø–æ–∏—Å–∫ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π (–ø–µ—Ä–µ—Ö–æ–¥ —á–µ—Ä–µ–∑ –Ω–æ–ª—å –≤—Ç–æ—Ä–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π)
        try:
            # –í—ã—á–∏—Å–ª—è–µ–º –ø–µ—Ä–≤—É—é –∏ –≤—Ç–æ—Ä—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ
            first_derivative = np.gradient(signal)
            second_derivative = np.gradient(first_derivative)
            
            # –ò—â–µ–º —Ç–æ—á–∫–∏ –ø–µ—Ä–µ–≥–∏–±–∞ (–≥–¥–µ –≤—Ç–æ—Ä–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è –º–µ–Ω—è–µ—Ç –∑–Ω–∞–∫)
            inflection_points = []
            for i in range(1, len(second_derivative)):
                if (second_derivative[i-1] * second_derivative[i] < 0 and 
                    second_derivative[i-1] > 0):  # –¢–æ–ª—å–∫–æ –≤–æ–≥–Ω—É—Ç–æ—Å—Ç—å -> –≤—ã–ø—É–∫–ª–æ—Å—Ç—å
                    inflection_points.append(i)
            
            if len(inflection_points) >= 2:
                print("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è 4 (–ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π)")
                return np.array(inflection_points)
        except:
            pass
        
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–∏–∫–∏ –Ω–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π")
        return np.array([])

    def manual_peak_correction(self, current_peaks):
        """
        –†—É—á–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –ø–∏–∫–æ–≤ —á–µ—Ä–µ–∑ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
        """
        if self.processed_data is None or current_peaks is None:
            return current_peaks
            
        print("\nüîß –†–µ–∂–∏–º —Ä—É—á–Ω–æ–π –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –ø–∏–∫–æ–≤")
        print("   –î–æ–±–∞–≤—å—Ç–µ –ø–∏–∫–∏: —â–µ–ª–∫–Ω–∏—Ç–µ –ª–µ–≤–æ–π –∫–Ω–æ–ø–∫–æ–π")
        print("   –£–¥–∞–ª–∏—Ç–µ –ø–∏–∫–∏: —â–µ–ª–∫–Ω–∏—Ç–µ –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–æ–π")
        print("   –ó–∞–≤–µ—Ä—à–∏—Ç–µ: –Ω–∞–∂–º–∏—Ç–µ Enter")
        
        time_processed = self.processed_data['–í—Ä–µ–º–µ–Ω–Ω–∞—è_–º–µ—Ç–∫–∞']
        distance_processed = self.processed_data['–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ_–Ω–æ—Ä–º']
        
        fig, ax = plt.subplots(figsize=(12, 6))
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫ –¥–∞–Ω–Ω—ã—Ö
        ax.plot(time_processed, distance_processed, 'b-', linewidth=1.5, label='–î–∞–Ω–Ω—ã–µ')
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∏–∫–æ–≤
        peak_points, = ax.plot(time_processed.iloc[current_peaks], distance_processed.iloc[current_peaks], 
                'ro', markersize=8, label='–¢–µ–∫—É—â–∏–µ –ø–∏–∫–∏')
        
        ax.set_xlabel('–í—Ä–µ–º—è (—Å–µ–∫)')
        ax.set_ylabel('–ù–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–º–º)')
        ax.set_title('–†—É—á–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –ø–∏–∫–æ–≤ - –õ–ö–ú: –¥–æ–±–∞–≤–∏—Ç—å, –ü–ö–ú: —É–¥–∞–ª–∏—Ç—å, Enter: –∑–∞–≤–µ—Ä—à–∏—Ç—å')
        ax.legend()
        ax.grid(True, alpha=0.3)
        
        corrected_peaks = list(current_peaks.copy())
        
        def update_peaks_display():
            """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∏–∫–æ–≤ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ"""
            peak_points.set_data(time_processed.iloc[corrected_peaks], distance_processed.iloc[corrected_peaks])
            fig.canvas.draw_idle()
        
        def on_click(event):
            if event.inaxes == ax:
                if event.button == 1:  # –õ–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞ - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∏–∫–∞
                    # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à—É—é —Ç–æ—á–∫—É –¥–∞–Ω–Ω—ã—Ö
                    x_click = event.xdata
                    
                    # –ò—â–µ–º –±–ª–∏–∂–∞–π—à—É—é —Ç–æ—á–∫—É –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                    time_diffs = np.abs(time_processed - x_click)
                    closest_idx = time_diffs.idxmin()
                    
                    if closest_idx not in corrected_peaks:
                        corrected_peaks.append(closest_idx)
                        corrected_peaks.sort()  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –ø–æ—Ä—è–¥–∫–∞
                        update_peaks_display()
                        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø–∏–∫ –≤ —Ç–æ—á–∫–µ {closest_idx}")
                
                elif event.button == 3:  # –ü—Ä–∞–≤–∞—è –∫–Ω–æ–ø–∫–∞ - —É–¥–∞–ª–µ–Ω–∏–µ –ø–∏–∫–∞
                    x_click = event.xdata
                    
                    # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π –ø–∏–∫
                    if corrected_peaks:
                        peak_times = time_processed.iloc[corrected_peaks]
                        time_diffs = np.abs(peak_times - x_click)
                        closest_peak_idx_in_list = time_diffs.argmin()
                        removed_peak = corrected_peaks[closest_peak_idx_in_list]
                        
                        corrected_peaks.remove(removed_peak)
                        update_peaks_display()
                        print(f"‚ùå –£–¥–∞–ª–µ–Ω –ø–∏–∫ –≤ —Ç–æ—á–∫–µ {removed_peak}")
        
        def on_key(event):
            if event.key == 'enter':
                plt.close()
        
        fig.canvas.mpl_connect('button_press_event', on_click)
        fig.canvas.mpl_connect('key_press_event', on_key)
        
        plt.show()
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∏–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        corrected_peaks = sorted(corrected_peaks)
        print(f"üìä –ò—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏–∫–æ–≤: {len(corrected_peaks)}")
        
        # –°–û–•–†–ê–ù–Ø–ï–ú –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–∏–∫–∏ –≤ –∞—Ç—Ä–∏–±—É—Ç –∫–ª–∞—Å—Å–∞
        self.corrected_peaks = np.array(corrected_peaks)
        
        return np.array(corrected_peaks)

    def plot_raw_data(self):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if self.data is None:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
            return
            
        try:
            plt.figure(figsize=(12, 6))
            
            plt.plot(self.data['–í—Ä–µ–º–µ–Ω–Ω–∞—è_–º–µ—Ç–∫–∞'], self.data['–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ_–º–º'], 
                    'b-', linewidth=1, label='–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
            
            plt.xlabel('–í—Ä–µ–º—è (—Å–µ–∫)')
            plt.ylabel('–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–º–º)')
            plt.title('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –†–§603')
            plt.legend()
            plt.grid(True, alpha=0.3)
            
            plt.tight_layout()
            plt.show()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {e}")

    def plot_processed_data(self, period=None, frequency=None, peaks=None):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if self.processed_data is None:
            print("‚ùå –ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            return
            
        try:
            fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 8))
            
            # –ì—Ä–∞—Ñ–∏–∫ 1: –ò—Å—Ö–æ–¥–Ω—ã–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            ax1.plot(self.data['–í—Ä–µ–º–µ–Ω–Ω–∞—è_–º–µ—Ç–∫–∞'], self.data['–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ_–º–º'], 
                    'gray', alpha=0.5, linewidth=1, label='–í—Å–µ –¥–∞–Ω–Ω—ã–µ')
            
            if len(self.processed_data) > 0:
                oscillation_times = self.processed_data['–í—Ä–µ–º–µ–Ω–Ω–∞—è_–º–µ—Ç–∫–∞']
                oscillation_distances = self.processed_data['–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ_–º–º']
                ax1.plot(oscillation_times, oscillation_distances, 'b-', linewidth=2, label='–û–±—Ä–µ–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
                
                # –û—Ç–º–µ—á–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
                start_time = oscillation_times.iloc[0]
                end_time = oscillation_times.iloc[-1]
                ax1.axvline(x=start_time, color='g', linestyle='--', alpha=0.7, label='–ù–∞—á–∞–ª–æ')
                ax1.axvline(x=end_time, color='r', linestyle='--', alpha=0.7, label='–ö–æ–Ω–µ—Ü')
            
            ax1.set_xlabel('–í—Ä–µ–º—è (—Å–µ–∫)')
            ax1.set_ylabel('–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–º–º)')
            ax1.set_title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö –∏ –æ–±—Ä–µ–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö')
            ax1.legend()
            ax1.grid(True, alpha=0.3)
            
            # –ì—Ä–∞—Ñ–∏–∫ 2: –ù–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if len(self.processed_data) > 0:
                time_processed = self.processed_data['–í—Ä–µ–º–µ–Ω–Ω–∞—è_–º–µ—Ç–∫–∞']
                distance_processed = self.processed_data['–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ_–Ω–æ—Ä–º']
                
                ax2.plot(time_processed, distance_processed, 'g-', linewidth=1.5, label='–ù–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ')
                
                # –ò–°–ü–û–õ–¨–ó–£–ï–ú –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–∏–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ
                display_peaks = self.corrected_peaks if self.corrected_peaks is not None else peaks
                
                if display_peaks is not None and len(display_peaks) > 0:
                    ax2.plot(time_processed.iloc[display_peaks], distance_processed.iloc[display_peaks], 
                            'ro', markersize=6, label='–ü–∏–∫–∏', alpha=0.7)
                
                # –ò–°–ü–û–õ–¨–ó–£–ï–ú —Ç–µ–∫—É—â–∏–µ –ø–µ—Ä–∏–æ–¥ –∏ —á–∞—Å—Ç–æ—Ç—É –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                display_period = self.current_period if self.current_period is not None else period
                display_frequency = self.current_frequency if self.current_frequency is not None else frequency
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–∏–æ–¥–µ –∏ —á–∞—Å—Ç–æ—Ç–µ
                info_text = ''
                if display_period is not None and display_frequency is not None:
                    info_text = f'–ü–µ—Ä–∏–æ–¥: {display_period:.6f} —Å–µ–∫\n–ß–∞—Å—Ç–æ—Ç–∞: {display_frequency:.2f} –ì—Ü'
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–º –¥–µ–∫—Ä–µ–º–µ–Ω—Ç–µ –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–µ –ø–æ—Ç–µ—Ä—å
                if self.log_decrement is not None and self.loss_factor is not None:
                    info_text += f'\n–õ–æ–≥. –¥–µ–∫—Ä–µ–º–µ–Ω—Ç (Œ¥): {self.log_decrement:.6f}'
                    info_text += f'\n–ö–æ—ç—Ñ. –ø–æ—Ç–µ—Ä—å (Œ∑): {self.loss_factor:.6f}'
                
                if self.corrected_peaks is not None:
                    info_text += '\n(–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–∏–∫–∏)'
                
                if info_text:
                    ax2.text(0.02, 0.98, info_text, 
                            transform=ax2.transAxes, verticalalignment='top',
                            bbox=dict(boxstyle='round', facecolor='wheat', alpha=0.8),
                            fontsize=10)
                
                ax2.set_xlabel('–í—Ä–µ–º—è (—Å–µ–∫)')
                ax2.set_ylabel('–ù–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–º–º)')
                ax2.set_title('–ê–Ω–∞–ª–∏–∑ –∑–∞—Ç—É—Ö–∞—é—â–∏—Ö –∫–æ–ª–µ–±–∞–Ω–∏–π')
                ax2.legend()
                ax2.grid(True, alpha=0.3)
            
            plt.tight_layout()
            plt.show()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {e}")

    def plot_detailed_analysis(self, period=None, frequency=None, peaks=None):
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –ø–µ—Ä–∏–æ–¥–∞–º–∏ –º–µ–∂–¥—É –ø–∏–∫–∞–º–∏"""
        if self.processed_data is None:
            print("‚ùå –ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            return
            
        try:
            time_processed = self.processed_data['–í—Ä–µ–º–µ–Ω–Ω–∞—è_–º–µ—Ç–∫–∞']
            distance_processed = self.processed_data['–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ_–Ω–æ—Ä–º']
            
            plt.figure(figsize=(12, 6))
            plt.plot(time_processed, distance_processed, 'b-', linewidth=1.5, label='–ù–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ')
            
            # –ò–°–ü–û–õ–¨–ó–£–ï–ú –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–∏–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ
            display_peaks = self.corrected_peaks if self.corrected_peaks is not None else peaks
            
            if display_peaks is not None and len(display_peaks) > 1:
                plt.plot(time_processed.iloc[display_peaks], distance_processed.iloc[display_peaks], 
                        'ro', markersize=6, label='–ü–∏–∫–∏')
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–∏–æ–¥—ã –º–µ–∂–¥—É –ø–∏–∫–∞–º–∏
                for i in range(len(display_peaks) - 1):
                    period_val = time_processed.iloc[display_peaks[i+1]] - time_processed.iloc[display_peaks[i]]
                    mid_time = (time_processed.iloc[display_peaks[i]] + time_processed.iloc[display_peaks[i+1]]) / 2
                    mid_val = (distance_processed.iloc[display_peaks[i]] + distance_processed.iloc[display_peaks[i+1]]) / 2
                    
                    plt.annotate(f'T={period_val:.4f}s', 
                               xy=(mid_time, mid_val),
                               xytext=(0, 20), textcoords='offset points',
                               ha='center', va='bottom',
                               bbox=dict(boxstyle='round,pad=0.2', facecolor='yellow', alpha=0.7),
                               arrowprops=dict(arrowstyle='->', connectionstyle='arc3,rad=0'))
            
            # –ò–°–ü–û–õ–¨–ó–£–ï–ú —Ç–µ–∫—É—â–∏–µ –ø–µ—Ä–∏–æ–¥ –∏ —á–∞—Å—Ç–æ—Ç—É –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            display_period = self.current_period if self.current_period is not None else period
            display_frequency = self.current_frequency if self.current_frequency is not None else frequency
            
            info_text = ''
            if display_period is not None and display_frequency is not None:
                info_text = f'–°—Ä–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥: {display_period:.6f} —Å–µ–∫\n–ß–∞—Å—Ç–æ—Ç–∞: {display_frequency:.2f} –ì—Ü'
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–º –¥–µ–∫—Ä–µ–º–µ–Ω—Ç–µ –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–µ –ø–æ—Ç–µ—Ä—å
            if self.log_decrement is not None and self.loss_factor is not None:
                info_text += f'\n–õ–æ–≥. –¥–µ–∫—Ä–µ–º–µ–Ω—Ç (Œ¥): {self.log_decrement:.6f}'
                info_text += f'\n–ö–æ—ç—Ñ. –ø–æ—Ç–µ—Ä—å (Œ∑): {self.loss_factor:.6f}'
            
            if self.corrected_peaks is not None:
                info_text += '\n(–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–∏–∫–∏)'
            
            if info_text:
                plt.text(0.02, 0.98, info_text, 
                        transform=plt.gca().transAxes, verticalalignment='top',
                        bbox=dict(boxstyle='round', facecolor='wheat', alpha=0.8))
            
            plt.xlabel('–í—Ä–µ–º—è (—Å–µ–∫)')
            plt.ylabel('–ù–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–º–º)')
            plt.title('–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–µ—Ä–∏–æ–¥–æ–≤ –∫–æ–ª–µ–±–∞–Ω–∏–π')
            plt.legend()
            plt.grid(True, alpha=0.3)
            plt.tight_layout()
            plt.show()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")

    def plot_logarithmic_decrement_analysis(self):
        """
        –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–∫—Ä–µ–º–µ–Ω—Ç–∞
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–º–ø–ª–∏—Ç—É–¥—ã –ø–∏–∫–æ–≤ –∏ –∏—Ö –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–µ –∑–∞—Ç—É—Ö–∞–Ω–∏–µ
        """
        if self.processed_data is None or self.corrected_peaks is None or len(self.corrected_peaks) < 2:
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–∫—Ä–µ–º–µ–Ω—Ç–∞")
            return
            
        try:
            time_processed = self.processed_data['–í—Ä–µ–º–µ–Ω–Ω–∞—è_–º–µ—Ç–∫–∞']
            distance_processed = self.processed_data['–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ_–Ω–æ—Ä–º']
            peaks = self.corrected_peaks
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–º–ø–ª–∏—Ç—É–¥—ã –∏ –≤—Ä–µ–º–µ–Ω–∞ –ø–∏–∫–æ–≤
            peak_times = time_processed.iloc[peaks].values
            peak_amplitudes = distance_processed.iloc[peaks].values
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ª–æ–≥–∞—Ä–∏—Ñ–º –∞–º–ø–ª–∏—Ç—É–¥
            log_amplitudes = np.log(np.abs(peak_amplitudes))
            
            fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 8))
            
            # –ì—Ä–∞—Ñ–∏–∫ 1: –ê–º–ø–ª–∏—Ç—É–¥—ã –ø–∏–∫–æ–≤
            ax1.plot(peak_times, peak_amplitudes, 'bo-', markersize=6, label='–ê–º–ø–ª–∏—Ç—É–¥—ã –ø–∏–∫–æ–≤')
            ax1.set_xlabel('–í—Ä–µ–º—è (—Å–µ–∫)')
            ax1.set_ylabel('–ê–º–ø–ª–∏—Ç—É–¥–∞ (–º–º)')
            ax1.set_title('–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∞–º–ø–ª–∏—Ç—É–¥ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏')
            ax1.legend()
            ax1.grid(True, alpha=0.3)
            
            # –ì—Ä–∞—Ñ–∏–∫ 2: –õ–æ–≥–∞—Ä–∏—Ñ–º –∞–º–ø–ª–∏—Ç—É–¥ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ª–∏–Ω–µ–π–Ω—ã–º –¥–ª—è —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∑–∞—Ç—É—Ö–∞–Ω–∏—è)
            ax2.plot(peak_times, log_amplitudes, 'ro-', markersize=6, label='ln(–ê–º–ø–ª–∏—Ç—É–¥–∞)')
            
            # –õ–∏–Ω–µ–π–Ω–∞—è –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è
            if len(peak_times) >= 2:
                coeffs = np.polyfit(peak_times, log_amplitudes, 1)
                trend_line = np.polyval(coeffs, peak_times)
                ax2.plot(peak_times, trend_line, 'r--', alpha=0.7, 
                        label=f'–ê–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è: y = {coeffs[0]:.4f}x + {coeffs[1]:.4f}')
                
                # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞—Ç—É—Ö–∞–Ω–∏—è Œ≤ = -slope
                beta = -coeffs[0]
                print(f"üìâ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞—Ç—É—Ö–∞–Ω–∏—è (Œ≤) –∏–∑ –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏–∏: {beta:.6f}")
            
            ax2.set_xlabel('–í—Ä–µ–º—è (—Å–µ–∫)')
            ax2.set_ylabel('ln(–ê–º–ø–ª–∏—Ç—É–¥–∞)')
            ax2.set_title('–õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∞–º–ø–ª–∏—Ç—É–¥ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–∏–Ω–µ–π–Ω–æ–π)')
            ax2.legend()
            ax2.grid(True, alpha=0.3)
            
            plt.tight_layout()
            plt.show()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–∫—Ä–µ–º–µ–Ω—Ç–∞: {e}")

    def save_results(self, period=None, frequency=None, input_filename=None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
        if self.processed_data is None:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return False
            
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            save_period = self.current_period if self.current_period is not None else period
            save_frequency = self.current_frequency if self.current_frequency is not None else frequency
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            output_file = os.path.splitext(input_filename)[0] + "_processed.csv"
            self.processed_data.to_csv(output_file, sep=';', index=False, encoding='utf-8')
            print(f"üíæ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_file}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
            results_file = os.path.splitext(input_filename)[0] + "_analysis_results.txt"
            with open(results_file, 'w', encoding='utf-8') as f:
                f.write("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê –ö–û–õ–ï–ë–ê–ù–ò–ô –†–§603\n")
                f.write("=" * 50 + "\n")
                f.write(f"–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö: {os.path.basename(input_filename)}\n")
                f.write(f"–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
                
                f.write("–ü–ê–†–ê–ú–ï–¢–†–´ –û–ë–†–ï–ó–ö–ò:\n")
                f.write(f"–ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞: {self.oscillation_start}\n")
                f.write(f"–ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞: {self.oscillation_end}\n")
                f.write(f"–ù–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {self.processed_data['–í—Ä–µ–º–µ–Ω–Ω–∞—è_–º–µ—Ç–∫–∞'].iloc[0]:.6f} —Å–µ–∫\n")
                f.write(f"–ö–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è: {self.processed_data['–í—Ä–µ–º–µ–Ω–Ω–∞—è_–º–µ—Ç–∫–∞'].iloc[-1]:.6f} —Å–µ–∫\n")
                f.write(f"–í—Å–µ–≥–æ —Ç–æ—á–µ–∫: {len(self.processed_data)}\n\n")
                
                f.write("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:\n")
                if save_period is not None and save_frequency is not None:
                    f.write(f"–ü–µ—Ä–∏–æ–¥ –∫–æ–ª–µ–±–∞–Ω–∏–π: {save_period:.6f} —Å–µ–∫\n")
                    f.write(f"–ß–∞—Å—Ç–æ—Ç–∞ –∫–æ–ª–µ–±–∞–Ω–∏–π: {save_frequency:.2f} –ì—Ü\n")
                
                if self.log_decrement is not None:
                    f.write(f"–õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏–π –¥–µ–∫—Ä–µ–º–µ–Ω—Ç (Œ¥): {self.log_decrement:.6f}\n")
                
                if self.damping_ratio is not None:
                    f.write(f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–µ–º–ø—Ñ–∏—Ä–æ–≤–∞–Ω–∏—è (Œ∂): {self.damping_ratio:.6f}\n")
                
                if self.loss_factor is not None:
                    f.write(f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–æ—Ç–µ—Ä—å (Œ∑): {self.loss_factor:.6f}\n")
                
                if self.corrected_peaks is not None:
                    f.write("–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–∏–∫–∏\n")
            
            print(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {results_file}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return False

def select_file():
    """–í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ"""
    root = tk.Tk()
    root.withdraw()
    
    file_path = filedialog.askopenfilename(
        title="–í—ã–±–µ—Ä–∏—Ç–µ CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –†–§603",
        filetypes=[("CSV files", "*.csv"), ("All files", "*.*")]
    )
    
    return file_path

def main():
    print("üéØ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–æ–ª–µ–±–∞–Ω–∏–π –†–§603 - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è —Å –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏–º –¥–µ–∫—Ä–µ–º–µ–Ω—Ç–æ–º")
    print("=" * 50)
    
    analyzer = RF603OscillationAnalyzer()
    
    # –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞
    input_file = select_file()
    if not input_file:
        print("‚ùå –§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω")
        return
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    if not analyzer.load_csv(input_file):
        return
    
    # –ù–æ—Ä–º–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    if not analyzer.normalize_data():
        return
    
    while True:
        print("\n" + "="*50)
        print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1. –ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        print("2. –û–±—Ä–µ–∑–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏")
        print("3. –û–±—Ä–µ–∑–∫–∞ –ø–æ —Ç–æ—á–∫–∞–º") 
        print("4. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–µ–∑–∫–∞ –∫–æ–ª–µ–±–∞–Ω–∏–π")
        print("5. –°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫ –∏—Å—Ö–æ–¥–Ω—ã–º")
        print("6. –†–∞—Å—á–µ—Ç –ø–µ—Ä–∏–æ–¥–∞ –∏ —á–∞—Å—Ç–æ—Ç—ã")
        print("7. –†—É—á–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –ø–∏–∫–æ–≤")
        print("8. –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–µ—Ä–∏–æ–¥–æ–≤")
        print("9. –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–∫—Ä–µ–º–µ–Ω—Ç–∞")
        print("10. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        print("11. –í—ã—Ö–æ–¥")
        
        choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-11): ").strip()
        
        if choice == '1':
            # –ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            analyzer.plot_raw_data()
        
        elif choice == '2':
            # –û–±—Ä–µ–∑–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            try:
                print(f"‚è±Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: 0.0 - {analyzer.processed_data['–í—Ä–µ–º–µ–Ω–Ω–∞—è_–º–µ—Ç–∫–∞'].iloc[-1]:.3f} —Å–µ–∫")
                start_time = float(input("–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (—Å–µ–∫): "))
                end_time = float(input("–í—Ä–µ–º—è –∫–æ–Ω—Ü–∞ (—Å–µ–∫): "))
                if analyzer.crop_by_time(start_time, end_time):
                    print("‚úÖ –û–±—Ä–µ–∑–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
                    analyzer.plot_processed_data()
            except ValueError:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")
        
        elif choice == '3':
            # –û–±—Ä–µ–∑–∫–∞ –ø–æ —Ç–æ—á–∫–∞–º
            try:
                print(f"üìä –í—Å–µ–≥–æ —Ç–æ—á–µ–∫: {len(analyzer.processed_data)}")
                start_point = int(input("–ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞: "))
                end_point = int(input("–ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞: "))
                if analyzer.crop_by_points(start_point, end_point):
                    print("‚úÖ –û–±—Ä–µ–∑–∫–∞ –ø–æ —Ç–æ—á–∫–∞–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
                    analyzer.plot_processed_data()
            except ValueError:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–µ–ª")
        
        elif choice == '4':
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–µ–∑–∫–∞
            try:
                duration = float(input("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ (—Å–µ–∫) [1.0]: ") or "1.0")
            except ValueError:
                duration = 1.0
                
            success, period, frequency, peaks = analyzer.auto_crop_oscillations(duration_after_start=duration)
            if success:
                print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–µ–∑–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                analyzer.plot_processed_data(period, frequency, peaks)
        
        elif choice == '5':
            # –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∫ –∏—Å—Ö–æ–¥–Ω—ã–º
            if analyzer.reset_to_original():
                print("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∏—Å—Ö–æ–¥–Ω—ã–º")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
                analyzer.plot_processed_data()
        
        elif choice == '6':
            # –†–∞—Å—á–µ—Ç –ø–µ—Ä–∏–æ–¥–∞ –∏ —á–∞—Å—Ç–æ—Ç—ã
            period, frequency, peaks = analyzer.calculate_period_frequency_improved()
            if period is not None:
                analyzer.plot_processed_data(period, frequency, peaks)
        
        elif choice == '7':
            # –†—É—á–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –ø–∏–∫–æ–≤
            period, frequency, peaks = analyzer.calculate_period_frequency_improved()
            if peaks is not None and len(peaks) > 0:
                try:
                    corrected_peaks = analyzer.manual_peak_correction(peaks)
                    # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–∏–∫–∞–º–∏
                    if len(corrected_peaks) >= 2:
                        timestamps = analyzer.processed_data['–í—Ä–µ–º–µ–Ω–Ω–∞—è_–º–µ—Ç–∫–∞'].values
                        periods = []
                        for i in range(len(corrected_peaks) - 1):
                            period_val = timestamps[corrected_peaks[i + 1]] - timestamps[corrected_peaks[i]]
                            periods.append(period_val)
                        
                        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤—ã–±—Ä–æ—Å–æ–≤
                        if len(periods) >= 3:
                            Q1 = np.percentile(periods, 25)
                            Q3 = np.percentile(periods, 75)
                            IQR = Q3 - Q1
                            lower_bound = Q1 - 1.5 * IQR
                            upper_bound = Q3 + 1.5 * IQR
                            filtered_periods = [p for p in periods if lower_bound <= p <= upper_bound]
                        else:
                            filtered_periods = periods
                        
                        if filtered_periods:
                            avg_period = np.mean(filtered_periods)
                        else:
                            avg_period = np.mean(periods) if periods else 0
                        
                        frequency = 1.0 / avg_period if avg_period > 0 else 0
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
                        analyzer.current_period = avg_period
                        analyzer.current_frequency = frequency
                        
                        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏–π –¥–µ–∫—Ä–µ–º–µ–Ω—Ç —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–∏–∫–∞–º–∏
                        analyzer.calculate_logarithmic_decrement(corrected_peaks)
                        
                        print(f"‚è±Ô∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {avg_period:.6f} —Å–µ–∫")
                        print(f"üìä –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞: {frequency:.2f} –ì—Ü")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–∏–∫–∞–º–∏
                        analyzer.plot_processed_data(avg_period, frequency, corrected_peaks)
                    else:
                        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2)")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–π –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏: {e}")
            else:
                print("‚ùå –ù–µ—Ç –ø–∏–∫–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏")
        
        elif choice == '8':
            # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            period, frequency, peaks = analyzer.calculate_period_frequency_improved()
            analyzer.plot_detailed_analysis(period, frequency, peaks)
        
        elif choice == '9':
            # –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–∫—Ä–µ–º–µ–Ω—Ç–∞
            if analyzer.corrected_peaks is not None and len(analyzer.corrected_peaks) >= 2:
                analyzer.plot_logarithmic_decrement_analysis()
            else:
                print("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Ä–∞—Å—á–µ—Ç –ø–µ—Ä–∏–æ–¥–æ–≤ –∏–ª–∏ —Ä—É—á–Ω—É—é –∫–æ—Ä—Ä–µ–∫—Ü–∏—é –ø–∏–∫–æ–≤")
        
        elif choice == '10':
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            period, frequency, peaks = analyzer.calculate_period_frequency_improved()
            analyzer.save_results(period, frequency, input_file)
        
        elif choice == '11':
            break
        
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

if __name__ == "__main__":
    main()