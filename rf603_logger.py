# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç—á–∏–∫–æ–º RF603HS
- –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –¥–∞—Ç—á–∏–∫–∞ —á–µ—Ä–µ–∑ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ—Ä—Ç
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ CSV (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ_–º–º, –Ω–æ–º–µ—Ä_—Ç–æ—á–∫–∏, –≤—Ä–µ–º—è_—Å–µ–∫)
- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞—Ç—É—Ö–∞—é—â–∏—Ö –∫–æ–ª–µ–±–∞–Ω–∏–π
"""

import serial
import serial.tools.list_ports
import struct
import time
import csv
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
from scipy.signal import find_peaks, savgol_filter, argrelextrema
from datetime import datetime
import threading
from collections import deque

class RF603Sensor:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç—á–∏–∫–æ–º RF603HS"""

    def __init__(self):
        self.serial_port = None
        self.is_connected = False
        self.device_info = {}
        self.data_buffer = deque(maxlen=10000)
        self.recording = False
        self.start_time = None

    @staticmethod
    def list_available_ports():
        """–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö COM-–ø–æ—Ä—Ç–æ–≤"""
        ports = serial.tools.list_ports.comports()
        available_ports = []
        print("\n" + "="*60)
        print("–î–û–°–¢–£–ü–ù–´–ï COM-–ü–û–†–¢–´:")
        print("="*60)

        for i, port in enumerate(ports, 1):
            print(f"{i}. {port.device}")
            print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {port.description}")
            print(f"   HWID: {port.hwid}")
            print("-"*60)
            available_ports.append(port.device)

        if not available_ports:
            print("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤!")

        return available_ports

    def connect(self, port, baudrate=9600, address=1):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –¥–∞—Ç—á–∏–∫—É"""
        try:
            print(f"\nüîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {port} –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ {baudrate} –±–æ–¥...")

            self.serial_port = serial.Serial(
                port=port,
                baudrate=baudrate,
                bytesize=serial.EIGHTBITS,
                parity=serial.PARITY_EVEN,
                stopbits=serial.STOPBITS_ONE,
                timeout=2
            )

            time.sleep(0.5)  # –ñ–¥–µ–º —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏

            # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä
            self.serial_port.reset_input_buffer()
            self.serial_port.reset_output_buffer()

            # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            if self.identify_device(address):
                self.is_connected = True
                print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
                return True
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—á–∏–∫")
                self.disconnect()
                return False

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False

    def identify_device(self, address=1):
        """–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–∑–∞–ø—Ä–æ—Å 01h)"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            inc0 = address & 0x7F  # –ê–¥—Ä–µ—Å (7 –±–∏—Ç)
            inc1 = 0x80 | 0x01     # 1000 0001 (–∫–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ 01h)

            request = bytes([inc0, inc1])
            self.serial_port.write(request)

            time.sleep(0.1)

            # –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç (16 –±–∞–π—Ç = 8 –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ 2 –±–∞–π—Ç–∞)
            response = self.serial_port.read(16)

            if len(response) >= 16:
                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                device_type = self._decode_byte(response[0], response[1])
                firmware_version = self._decode_byte(response[2], response[3])
                serial_number = self._decode_word(response[4:8])
                base_distance = self._decode_word(response[8:12])
                measurement_range = self._decode_word(response[12:16])

                self.device_info = {
                    'type': device_type,
                    'firmware': firmware_version,
                    'serial': serial_number,
                    'base_distance': base_distance,
                    'range': measurement_range
                }

                print("\n" + "="*60)
                print("–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –î–ê–¢–ß–ò–ö–ï:")
                print("="*60)
                print(f"–¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {device_type}")
                print(f"–í–µ—Ä—Å–∏—è –ü–û: {firmware_version}")
                print(f"–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: {serial_number}")
                print(f"–ë–∞–∑–æ–≤–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {base_distance} –º–º")
                print(f"–î–∏–∞–ø–∞–∑–æ–Ω –∏–∑–º–µ—Ä–µ–Ω–∏—è: {measurement_range} –º–º")
                print("="*60)

                return True

            return False

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            return False

    def _decode_byte(self, byte0, byte1):
        """–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–π—Ç–∞ –∏–∑ –¥–≤—É—Ö –ø–æ—Å—ã–ª–æ–∫"""
        # byte0: 1 0 CNT CNT DAT3 DAT2 DAT1 DAT0
        # byte1: 1 0 CNT CNT DAT7 DAT6 DAT5 DAT4
        low_nibble = byte0 & 0x0F
        high_nibble = byte1 & 0x0F
        return (high_nibble << 4) | low_nibble

    def _decode_word(self, bytes_data):
        """–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞ (2 –±–∞–π—Ç–∞) –∏–∑ 4 –ø–æ—Å—ã–ª–æ–∫"""
        byte0 = self._decode_byte(bytes_data[0], bytes_data[1])
        byte1 = self._decode_byte(bytes_data[2], bytes_data[3])
        return (byte1 << 8) | byte0

    def request_single_measurement(self, address=1):
        """–ó–∞–ø—Ä–æ—Å –æ–¥–Ω–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è (–∑–∞–ø—Ä–æ—Å 06h)"""
        try:
            inc0 = address & 0x7F
            inc1 = 0x80 | 0x06

            request = bytes([inc0, inc1])
            self.serial_port.write(request)

            time.sleep(0.05)

            response = self.serial_port.read(4)

            if len(response) >= 4:
                result = self._decode_word(response[0:4])
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–º
                distance_mm = (result * self.device_info['range']) / 0x4000
                return distance_mm

            return None

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
            return None

    def start_data_stream(self, address=1):
        """–ù–∞—á–∞—Ç—å –ø–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö (–∑–∞–ø—Ä–æ—Å 07h)"""
        try:
            inc0 = address & 0x7F
            inc1 = 0x80 | 0x07

            request = bytes([inc0, inc1])
            self.serial_port.write(request)
            print("üì° –ü–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ—Ç–æ–∫–∞: {e}")

    def stop_data_stream(self, address=1):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö (–∑–∞–ø—Ä–æ—Å 08h)"""
        try:
            inc0 = address & 0x7F
            inc1 = 0x80 | 0x08

            request = bytes([inc0, inc1])
            self.serial_port.write(request)
            print("‚èπ –ü–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ç–æ–∫–∞: {e}")

    def read_stream_data(self):
        """–ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–æ—Ç–æ–∫–∞"""
        try:
            if self.serial_port.in_waiting >= 4:
                response = self.serial_port.read(4)
                if len(response) >= 4:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ø–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö (—Å—Ç–∞—Ä—à–∏–π –±–∏—Ç = 1)
                    if (response[0] & 0x80) and (response[2] & 0x80):
                        result = self._decode_word(response[0:4])
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–º
                        distance_mm = (result * self.device_info['range']) / 0x4000
                        return distance_mm
            return None

        except Exception as e:
            return None

    def change_baudrate(self, new_baudrate, address=1):
        """–ò–∑–º–µ–Ω–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ (–≤ –¥–∏—Å–∫—Ä–µ—Ç–∞—Ö –ø–æ 2400)
            param_value = new_baudrate // 2400

            if param_value < 1 or param_value > 192:
                print(f"‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: {new_baudrate}")
                return False

            # –ó–∞–ø—Ä–æ—Å –∑–∞–ø–∏—Å–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ (03h)
            inc0 = address & 0x7F
            inc1 = 0x80 | 0x03

            # –°–æ–æ–±—â–µ–Ω–∏–µ: –∫–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ (04h) + –∑–Ω–∞—á–µ–Ω–∏–µ
            msg = self._encode_byte(0x04) + self._encode_byte(param_value)

            request = bytes([inc0, inc1]) + bytes(msg)
            self.serial_port.write(request)

            time.sleep(0.1)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ Flash (04h)
            inc1_save = 0x80 | 0x04
            msg_save = self._encode_byte(0xAA) + self._encode_byte(0xAA)
            request_save = bytes([inc0, inc1_save]) + bytes(msg_save)
            self.serial_port.write(request_save)

            time.sleep(0.2)

            # –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —Å –Ω–æ–≤–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é
            port = self.serial_port.port
            self.disconnect()
            time.sleep(0.5)

            return self.connect(port, new_baudrate, address)

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏: {e}")
            return False

    def _encode_byte(self, value):
        """–ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–π—Ç–∞ –≤ –¥–≤–µ –ø–æ—Å—ã–ª–∫–∏"""
        low_nibble = value & 0x0F
        high_nibble = (value >> 4) & 0x0F

        byte0 = 0x80 | low_nibble
        byte1 = 0x80 | high_nibble

        return [byte0, byte1]

    def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –¥–∞—Ç—á–∏–∫–∞"""
        if self.serial_port and self.serial_port.is_open:
            self.serial_port.close()
            print("üîå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç –¥–∞—Ç—á–∏–∫–∞")
        self.is_connected = False


class DataRecorder:
    """–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö"""

    def __init__(self, sensor):
        self.sensor = sensor
        self.data_points = []
        self.recording = False
        self.record_thread = None
        self.start_time = None
        self.point_counter = 0

    def start_recording(self, filename=None):
        """–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö"""
        if filename is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"rf603_data_{timestamp}.csv"

        self.filename = filename
        self.data_points = []
        self.recording = True
        self.start_time = time.time()
        self.point_counter = 0

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö
        self.sensor.start_data_stream()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –∑–∞–ø–∏—Å–∏
        self.record_thread = threading.Thread(target=self._record_loop)
        self.record_thread.daemon = True
        self.record_thread.start()

        print(f"üî¥ –ó–ê–ü–ò–°–¨ –ù–ê–ß–ê–¢–ê ‚Üí {filename}")

    def _record_loop(self):
        """–¶–∏–∫–ª –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö"""
        while self.recording:
            distance = self.sensor.read_stream_data()

            if distance is not None:
                elapsed_time = time.time() - self.start_time

                data_point = {
                    '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ_–º–º': distance,
                    '–ù–æ–º–µ—Ä_—Ç–æ—á–∫–∏': self.point_counter,
                    '–í—Ä–µ–º–µ–Ω–Ω–∞—è_–º–µ—Ç–∫–∞': elapsed_time
                }

                self.data_points.append(data_point)
                self.point_counter += 1

                # –í—ã–≤–æ–¥–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 —Ç–æ—á–µ–∫
                if self.point_counter % 100 == 0:
                    print(f"üìä –ó–∞–ø–∏—Å–∞–Ω–æ —Ç–æ—á–µ–∫: {self.point_counter}, –í—Ä–µ–º—è: {elapsed_time:.2f} —Å–µ–∫")

            time.sleep(0.001)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

    def stop_recording(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å"""
        if not self.recording:
            return None

        self.recording = False
        self.sensor.stop_data_stream()

        if self.record_thread:
            self.record_thread.join(timeout=2)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV
        if self.data_points:
            df = pd.DataFrame(self.data_points)
            df.to_csv(self.filename, sep=';', index=False, encoding='utf-8')

            print(f"\n‚úÖ –ó–ê–ü–ò–°–¨ –ó–ê–í–ï–†–®–ï–ù–ê:")
            print(f"   üìÅ –§–∞–π–ª: {self.filename}")
            print(f"   üìä –¢–æ—á–µ–∫: {len(self.data_points)}")
            print(f"   ‚è±Ô∏è –í—Ä–µ–º—è: {self.data_points[-1]['–í—Ä–µ–º–µ–Ω–Ω–∞—è_–º–µ—Ç–∫–∞']:.2f} —Å–µ–∫")

            return self.filename

        return None


class RF603OscillationAnalyzer:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞—Ç—É—Ö–∞—é—â–∏—Ö –∫–æ–ª–µ–±–∞–Ω–∏–π (–∏–∑ dekrement.py)"""

    def __init__(self):
        self.data = None
        self.processed_data = None
        self.original_processed_data = None
        self.oscillation_start = 0
        self.oscillation_end = 0
        self.corrected_peaks = None
        self.current_period = None
        self.current_frequency = None
        self.log_decrement = None
        self.loss_factor = None
        self.damping_ratio = None

    def load_csv(self, filename):
        """–ó–∞–≥—Ä—É–∑–∫–∞ CSV —Ñ–∞–π–ª–∞"""
        try:
            self.data = pd.read_csv(filename, delimiter=';', encoding='utf-8')
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑: {filename}")
            print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.data)} —Å—Ç—Ä–æ–∫")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            return False

    def normalize_data(self):
        """–ù–æ—Ä–º–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        if self.data is None:
            return False

        try:
            self.processed_data = self.data.copy()
            first_distance = self.processed_data.iloc[0]['–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ_–º–º']
            self.processed_data['–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ_–Ω–æ—Ä–º'] = (
                self.processed_data['–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ_–º–º'] - first_distance
            )

            self.original_processed_data = self.processed_data.copy()
            print(f"‚úÖ –ù–æ—Ä–º–∏—Ä–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –ü–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {first_distance:.3f} –º–º")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∏—Ä–æ–≤–∫–∏: {e}")
            return False

    def find_release_point(self, threshold=0.5):
        """–ü–æ–∏—Å–∫ –Ω–∞—á–∞–ª–∞ –∫–æ–ª–µ–±–∞–Ω–∏–π"""
        if self.processed_data is None:
            return 0

        distances = self.processed_data['–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ_–Ω–æ—Ä–º'].values

        for i in range(1, len(distances) - 10):
            window = distances[i:i+10]
            if np.max(window) - np.min(window) > threshold:
                release_point = max(0, i - 5)
                print(f"üìç –ù–∞—á–∞–ª–æ –∫–æ–ª–µ–±–∞–Ω–∏–π –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–æ—á–∫–µ {release_point}")
                return release_point

        print("‚ö†Ô∏è –ù–∞—á–∞–ª–æ –∫–æ–ª–µ–±–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return 0

    def auto_crop_oscillations(self, duration_after_start=1.0):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–µ–∑–∫–∞ –∫–æ–ª–µ–±–∞–Ω–∏–π"""
        if self.processed_data is None:
            return False, None, None, None

        try:
            # –ù–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª–æ
            start_idx = self.find_release_point(threshold=0.5)
            if start_idx == 0:
                return False, None, None, None

            start_time = self.processed_data.iloc[start_idx]['–í—Ä–µ–º–µ–Ω–Ω–∞—è_–º–µ—Ç–∫–∞']
            end_time = start_time + duration_after_start

            # –û–±—Ä–µ–∑–∞–µ–º
            start_mask = self.processed_data['–í—Ä–µ–º–µ–Ω–Ω–∞—è_–º–µ—Ç–∫–∞'] >= start_time
            end_mask = self.processed_data['–í—Ä–µ–º–µ–Ω–Ω–∞—è_–º–µ—Ç–∫–∞'] <= end_time

            if not any(start_mask) or not any(end_mask):
                return False, None, None, None

            start_idx = self.processed_data[start_mask].index[0]
            end_idx = self.processed_data[end_mask].index[-1]

            self.processed_data = self.processed_data.iloc[start_idx:end_idx + 1].reset_index(drop=True)
            self.oscillation_start = start_idx
            self.oscillation_end = end_idx

            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±—Ä–µ–∑–∞–Ω—ã: {start_idx}-{end_idx}")

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            period, frequency, peaks = self.calculate_period_frequency_improved()

            return True, period, frequency, peaks

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–µ–∑–∫–∏: {e}")
            return False, None, None, None

    def calculate_period_frequency_improved(self):
        """–†–∞—Å—á–µ—Ç –ø–µ—Ä–∏–æ–¥–∞ –∏ —á–∞—Å—Ç–æ—Ç—ã"""
        if self.processed_data is None:
            return None, None, None

        try:
            distances = self.processed_data['–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ_–Ω–æ—Ä–º'].values
            timestamps = self.processed_data['–í—Ä–µ–º–µ–Ω–Ω–∞—è_–º–µ—Ç–∫–∞'].values

            # –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ
            if len(distances) > 11:
                distances_smooth = savgol_filter(distances, 11, 3)
            else:
                distances_smooth = distances

            # –ü–æ–∏—Å–∫ –ø–∏–∫–æ–≤
            amplitude = np.max(distances_smooth) - np.min(distances_smooth)
            peaks, _ = find_peaks(
                distances_smooth,
                height=amplitude * 0.1,
                distance=max(3, len(distances_smooth) // 20),
                prominence=amplitude * 0.05
            )

            if len(peaks) < 2:
                print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∏–∫–æ–≤")
                return None, None, None

            print(f"üìà –ù–∞–π–¥–µ–Ω–æ –ø–∏–∫–æ–≤: {len(peaks)}")

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥—ã
            periods = []
            for i in range(len(peaks) - 1):
                period = timestamps[peaks[i + 1]] - timestamps[peaks[i]]
                periods.append(period)

            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤—ã–±—Ä–æ—Å–æ–≤
            if len(periods) >= 3:
                Q1 = np.percentile(periods, 25)
                Q3 = np.percentile(periods, 75)
                IQR = Q3 - Q1
                lower_bound = Q1 - 1.5 * IQR
                upper_bound = Q3 + 1.5 * IQR
                filtered_periods = [p for p in periods if lower_bound <= p <= upper_bound]
            else:
                filtered_periods = periods

            if not filtered_periods:
                filtered_periods = periods

            avg_period = np.mean(filtered_periods)
            frequency = 1.0 / avg_period if avg_period > 0 else 0

            self.current_period = avg_period
            self.current_frequency = frequency

            print(f"‚è±Ô∏è –ü–µ—Ä–∏–æ–¥: {avg_period:.6f} —Å–µ–∫")
            print(f"üìä –ß–∞—Å—Ç–æ—Ç–∞: {frequency:.2f} –ì—Ü")

            # –õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏–π –¥–µ–∫—Ä–µ–º–µ–Ω—Ç
            self.calculate_logarithmic_decrement(peaks)

            return avg_period, frequency, peaks

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {e}")
            return None, None, None

    def calculate_logarithmic_decrement(self, peaks):
        """–†–∞—Å—á–µ—Ç –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–∫—Ä–µ–º–µ–Ω—Ç–∞"""
        if peaks is None or len(peaks) < 2:
            return None, None, None

        try:
            distances = self.processed_data['–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ_–Ω–æ—Ä–º'].values
            amplitudes = distances[peaks]

            decrements = []
            for i in range(len(peaks) - 1):
                A_i = abs(amplitudes[i])
                A_i_plus_1 = abs(amplitudes[i + 1])

                if A_i_plus_1 > 0:
                    delta = np.log(A_i / A_i_plus_1)
                    decrements.append(delta)

            if not decrements:
                return None, None, None

            avg_decrement = np.mean(decrements)
            damping_ratio = avg_decrement / np.sqrt(4 * np.pi**2 + avg_decrement**2)
            loss_factor = 2 * damping_ratio

            self.log_decrement = avg_decrement
            self.damping_ratio = damping_ratio
            self.loss_factor = loss_factor

            print(f"üìâ –õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏–π –¥–µ–∫—Ä–µ–º–µ–Ω—Ç (Œ¥): {avg_decrement:.6f}")
            print(f"üìâ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–µ–º–ø—Ñ–∏—Ä–æ–≤–∞–Ω–∏—è (Œ∂): {damping_ratio:.6f}")
            print(f"üìâ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–æ—Ç–µ—Ä—å (Œ∑): {loss_factor:.6f}")

            return avg_decrement, damping_ratio, loss_factor

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–µ–∫—Ä–µ–º–µ–Ω—Ç–∞: {e}")
            return None, None, None

    def plot_results(self):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        if self.processed_data is None:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤")
            return

        try:
            fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 10))

            time_data = self.processed_data['–í—Ä–µ–º–µ–Ω–Ω–∞—è_–º–µ—Ç–∫–∞']
            distance_norm = self.processed_data['–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ_–Ω–æ—Ä–º']

            # –ì—Ä–∞—Ñ–∏–∫ 1: –ó–∞—Ç—É—Ö–∞—é—â–∏–µ –∫–æ–ª–µ–±–∞–Ω–∏—è
            ax1.plot(time_data, distance_norm, 'b-', linewidth=1.5, label='–ö–æ–ª–µ–±–∞–Ω–∏—è')
            ax1.set_xlabel('–í—Ä–µ–º—è (—Å–µ–∫)', fontsize=12)
            ax1.set_ylabel('–ù–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–º–º)', fontsize=12)
            ax1.set_title('–ó–∞—Ç—É—Ö–∞—é—â–∏–µ –∫–æ–ª–µ–±–∞–Ω–∏—è', fontsize=14, fontweight='bold')
            ax1.grid(True, alpha=0.3)
            ax1.legend()

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if self.current_period and self.current_frequency:
                info_text = f'–ü–µ—Ä–∏–æ–¥: {self.current_period:.6f} —Å–µ–∫\n–ß–∞—Å—Ç–æ—Ç–∞: {self.current_frequency:.2f} –ì—Ü'
                if self.log_decrement:
                    info_text += f'\n–õ–æ–≥. –¥–µ–∫—Ä–µ–º–µ–Ω—Ç (Œ¥): {self.log_decrement:.6f}'
                    info_text += f'\n–ö–æ—ç—Ñ. –ø–æ—Ç–µ—Ä—å (Œ∑): {self.loss_factor:.6f}'

                ax1.text(0.02, 0.98, info_text,
                        transform=ax1.transAxes, verticalalignment='top',
                        bbox=dict(boxstyle='round', facecolor='wheat', alpha=0.8),
                        fontsize=10)

            # –ì—Ä–∞—Ñ–∏–∫ 2: –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏
            ax2.plot(time_data, self.processed_data['–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ_–º–º'], 'g-',
                    linewidth=1.5, label='–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ')
            ax2.set_xlabel('–í—Ä–µ–º—è (—Å–µ–∫)', fontsize=12)
            ax2.set_ylabel('–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–º–º)', fontsize=12)
            ax2.set_title('–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –æ—Ç –≤—Ä–µ–º–µ–Ω–∏', fontsize=14, fontweight='bold')
            ax2.grid(True, alpha=0.3)
            ax2.legend()

            plt.tight_layout()
            plt.show()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("="*70)
    print(" "*15 + "RF603HS LOGGER & ANALYZER")
    print("="*70)

    sensor = RF603Sensor()

    # 1. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ—Ä—Ç—ã
    available_ports = sensor.list_available_ports()

    if not available_ports:
        print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")
        return

    # 2. –í—ã–±–∏—Ä–∞–µ–º –ø–æ—Ä—Ç
    try:
        port_choice = int(input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä—Ç (1-{len(available_ports)}): ")) - 1
        selected_port = available_ports[port_choice]
    except (ValueError, IndexError):
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
        return

    # 3. –í—ã–±–∏—Ä–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å
    print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ (–±–æ–¥):")
    print("1. 9600 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
    print("2. 19200")
    print("3. 57600")
    print("4. 115200")
    print("5. 460800")

    baud_rates = {1: 9600, 2: 19200, 3: 57600, 4: 115200, 5: 460800}
    try:
        baud_choice = int(input("–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å (1-5): "))
        selected_baud = baud_rates.get(baud_choice, 9600)
    except ValueError:
        selected_baud = 9600

    # 4. –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
    if not sensor.connect(selected_port, selected_baud):
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")
        return

    # 5. –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö
    recorder = DataRecorder(sensor)

    print("\n" + "="*70)
    print("–ó–ê–ü–ò–°–¨ –î–ê–ù–ù–´–•")
    print("="*70)
    print("–ù–∞–∂–º–∏—Ç–µ ENTER –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏...")
    input()

    recorder.start_recording()

    print("\n–ù–∞–∂–º–∏—Ç–µ ENTER –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏...")
    input()

    filename = recorder.stop_recording()

    if filename is None:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        sensor.disconnect()
        return

    # 6. –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
    print("\n" + "="*70)
    print("–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–•")
    print("="*70)

    analyzer = RF603OscillationAnalyzer()

    if not analyzer.load_csv(filename):
        sensor.disconnect()
        return

    if not analyzer.normalize_data():
        sensor.disconnect()
        return

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–µ–∑–∫–∞
    print("\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –∫–æ–ª–µ–±–∞–Ω–∏–π (—Å–µ–∫) [–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1.0]:")
    try:
        duration = float(input("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ") or "1.0")
    except ValueError:
        duration = 1.0

    success, period, frequency, peaks = analyzer.auto_crop_oscillations(duration)

    if success:
        print("\n" + "="*70)
        print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê")
        print("="*70)
        print(f"‚è±Ô∏è –ü–µ—Ä–∏–æ–¥ –∫–æ–ª–µ–±–∞–Ω–∏–π: {period:.6f} —Å–µ–∫")
        print(f"üìä –ß–∞—Å—Ç–æ—Ç–∞: {frequency:.2f} –ì—Ü")

        if analyzer.log_decrement:
            print(f"üìâ –õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏–π –¥–µ–∫—Ä–µ–º–µ–Ω—Ç: {analyzer.log_decrement:.6f}")
            print(f"üìâ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–µ–º–ø—Ñ–∏—Ä–æ–≤–∞–Ω–∏—è: {analyzer.damping_ratio:.6f}")
            print(f"üìâ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–æ—Ç–µ—Ä—å: {analyzer.loss_factor:.6f}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
        print("\nüìä –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤...")
        analyzer.plot_results()
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑")

    sensor.disconnect()
    print("\n‚úÖ –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


if __name__ == "__main__":
    main()
