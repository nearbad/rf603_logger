# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å –¥–∞—Ç—á–∏–∫–∞ RF603HS –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""

import serial
import serial.tools.list_ports
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation
from collections import deque
import time
from datetime import datetime
import csv
import pandas as pd

class RF603RealtimePlotter:
    """–ö–ª–∞—Å—Å –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""

    def __init__(self, max_points=1000):
        self.max_points = max_points
        self.time_data = deque(maxlen=max_points)
        self.distance_data = deque(maxlen=max_points)
        self.point_counter = 0
        self.start_time = None
        self.serial_port = None
        self.is_running = False

        # CSV —Ñ–∞–π–ª
        self.csv_file = None
        self.csv_writer = None

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        self.fig, (self.ax1, self.ax2) = plt.subplots(2, 1, figsize=(12, 8))
        self.line1, = self.ax1.plot([], [], 'b-', linewidth=1.5, label='–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–º–º)')
        self.line2, = self.ax2.plot([], [], 'r-', linewidth=1.5, label='–¢–æ—á–∫–∏')

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π
        self.ax1.set_xlabel('–í—Ä–µ–º—è (—Å–µ–∫)', fontsize=12)
        self.ax1.set_ylabel('–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–º–º)', fontsize=12)
        self.ax1.set_title('–î–∞–Ω–Ω—ã–µ —Å –¥–∞—Ç—á–∏–∫–∞ RF603HS –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏', fontsize=14, fontweight='bold')
        self.ax1.grid(True, alpha=0.3)
        self.ax1.legend()

        self.ax2.set_xlabel('–ù–æ–º–µ—Ä —Ç–æ—á–∫–∏', fontsize=12)
        self.ax2.set_ylabel('–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–º–º)', fontsize=12)
        self.ax2.set_title('–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –æ—Ç –Ω–æ–º–µ—Ä–∞ —Ç–æ—á–∫–∏', fontsize=14, fontweight='bold')
        self.ax2.grid(True, alpha=0.3)
        self.ax2.legend()

        plt.tight_layout()

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        self.info_text = self.ax1.text(0.02, 0.98, '', transform=self.ax1.transAxes,
                                       verticalalignment='top',
                                       bbox=dict(boxstyle='round', facecolor='wheat', alpha=0.8),
                                       fontsize=10)

    def connect(self, port, baudrate=9600):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –¥–∞—Ç—á–∏–∫—É"""
        try:
            self.serial_port = serial.Serial(
                port=port,
                baudrate=baudrate,
                bytesize=serial.EIGHTBITS,
                parity=serial.PARITY_EVEN,
                stopbits=serial.STOPBITS_ONE,
                timeout=0.5
            )

            time.sleep(0.5)
            self.serial_port.reset_input_buffer()
            self.serial_port.reset_output_buffer()

            # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            if self.identify_device():
                print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –¥–∞—Ç—á–∏–∫—É")
                return True

            return False

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False

    def identify_device(self):
        """–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–∞—Ç—á–∏–∫–∞"""
        try:
            # –ó–∞–ø—Ä–æ—Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (01h)
            request = bytes([0x01, 0x81])
            self.serial_port.write(request)
            time.sleep(0.1)

            response = self.serial_port.read(16)

            if len(response) >= 16:
                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∏ –¥–∏–∞–ø–∞–∑–æ–Ω
                base_dist_low = (response[8] & 0x0F) | ((response[9] & 0x0F) << 4)
                base_dist_high = (response[10] & 0x0F) | ((response[11] & 0x0F) << 4)
                self.base_distance = (base_dist_high << 8) | base_dist_low

                range_low = (response[12] & 0x0F) | ((response[13] & 0x0F) << 4)
                range_high = (response[14] & 0x0F) | ((response[15] & 0x0F) << 4)
                self.measurement_range = (range_high << 8) | range_low

                print(f"üìä –ë–∞–∑–æ–≤–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {self.base_distance} –º–º")
                print(f"üìä –î–∏–∞–ø–∞–∑–æ–Ω: {self.measurement_range} –º–º")

                return True

            return False

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            return False

    def start_stream(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            request = bytes([0x01, 0x87])  # –ó–∞–ø—Ä–æ—Å 07h
            self.serial_port.write(request)
            print("üì° –ü–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ—Ç–æ–∫–∞: {e}")

    def stop_stream(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            request = bytes([0x01, 0x88])  # –ó–∞–ø—Ä–æ—Å 08h
            self.serial_port.write(request)
            print("‚èπ –ü–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ç–æ–∫–∞: {e}")

    def read_measurement(self):
        """–ß—Ç–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è"""
        try:
            if self.serial_port.in_waiting >= 4:
                data = self.serial_port.read(4)

                if len(data) == 4 and (data[0] & 0x80) and (data[2] & 0x80):
                    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º
                    low_byte = (data[0] & 0x0F) | ((data[1] & 0x0F) << 4)
                    high_byte = (data[2] & 0x0F) | ((data[3] & 0x0F) << 4)
                    raw_value = (high_byte << 8) | low_byte

                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–º
                    distance_mm = (raw_value * self.measurement_range) / 0x4000

                    return distance_mm

            return None

        except Exception as e:
            return None

    def open_csv(self, filename=None):
        """–û—Ç–∫—Ä—ã—Ç—å CSV —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏"""
        if filename is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"rf603_realtime_{timestamp}.csv"

        self.csv_filename = filename
        self.csv_file = open(filename, 'w', newline='', encoding='utf-8')
        self.csv_writer = csv.writer(self.csv_file, delimiter=';')
        self.csv_writer.writerow(['–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ_–º–º', '–ù–æ–º–µ—Ä_—Ç–æ—á–∫–∏', '–í—Ä–µ–º–µ–Ω–Ω–∞—è_–º–µ—Ç–∫–∞'])

        print(f"üìÅ CSV —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {filename}")

    def close_csv(self):
        """–ó–∞–∫—Ä—ã—Ç—å CSV —Ñ–∞–π–ª"""
        if self.csv_file:
            self.csv_file.close()
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {self.csv_filename}")

    def update_plot(self, frame):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
        distance = self.read_measurement()

        if distance is not None:
            if self.start_time is None:
                self.start_time = time.time()

            elapsed_time = time.time() - self.start_time
            self.time_data.append(elapsed_time)
            self.distance_data.append(distance)

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ CSV
            if self.csv_writer:
                self.csv_writer.writerow([distance, self.point_counter, elapsed_time])

            self.point_counter += 1

            # –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
            if len(self.time_data) > 1:
                # –ì—Ä–∞—Ñ–∏–∫ 1: –≤—Ä–µ–º—è - —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
                self.line1.set_data(list(self.time_data), list(self.distance_data))
                self.ax1.relim()
                self.ax1.autoscale_view()

                # –ì—Ä–∞—Ñ–∏–∫ 2: —Ç–æ—á–∫–∏ - —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
                points = list(range(max(0, self.point_counter - len(self.distance_data)),
                                   self.point_counter))
                self.line2.set_data(points, list(self.distance_data))
                self.ax2.relim()
                self.ax2.autoscale_view()

                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                if len(self.distance_data) >= 2:
                    current_dist = self.distance_data[-1]
                    min_dist = min(self.distance_data)
                    max_dist = max(self.distance_data)
                    avg_dist = np.mean(self.distance_data)

                    info = f'–¢–æ—á–µ–∫: {self.point_counter}\n'
                    info += f'–í—Ä–µ–º—è: {elapsed_time:.2f} —Å–µ–∫\n'
                    info += f'–¢–µ–∫—É—â–µ–µ: {current_dist:.3f} –º–º\n'
                    info += f'–ú–∏–Ω: {min_dist:.3f} –º–º\n'
                    info += f'–ú–∞–∫—Å: {max_dist:.3f} –º–º\n'
                    info += f'–°—Ä–µ–¥–Ω–µ–µ: {avg_dist:.3f} –º–º'

                    self.info_text.set_text(info)

        return self.line1, self.line2, self.info_text

    def run(self):
        """–ó–∞–ø—É—Å–∫ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
        self.is_running = True
        self.start_stream()
        self.open_csv()

        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        ani = animation.FuncAnimation(
            self.fig,
            self.update_plot,
            interval=10,  # 10 –º—Å –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
            blit=False,
            cache_frame_data=False
        )

        plt.show()

        # –ü–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        self.stop_stream()
        self.close_csv()
        self.is_running = False

        if self.serial_port:
            self.serial_port.close()

        print("‚úÖ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        return self.csv_filename


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("="*70)
    print(" "*10 + "RF603HS REALTIME VISUALIZATION")
    print("="*70)

    # –°–ø–∏—Å–æ–∫ –ø–æ—Ä—Ç–æ–≤
    ports = serial.tools.list_ports.comports()
    available_ports = []

    print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ—Ä—Ç—ã:")
    for i, port in enumerate(ports, 1):
        print(f"{i}. {port.device} - {port.description}")
        available_ports.append(port.device)

    if not available_ports:
        print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤")
        return

    # –í—ã–±–æ—Ä –ø–æ—Ä—Ç–∞
    try:
        port_choice = int(input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä—Ç (1-{len(available_ports)}): ")) - 1
        selected_port = available_ports[port_choice]
    except (ValueError, IndexError):
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
        return

    # –í—ã–±–æ—Ä —Å–∫–æ—Ä–æ—Å—Ç–∏
    print("\n–°–∫–æ—Ä–æ—Å—Ç—å (–±–æ–¥):")
    print("1. 9600 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
    print("2. 19200")
    print("3. 57600")
    print("4. 115200")

    baud_rates = {1: 9600, 2: 19200, 3: 57600, 4: 115200}
    try:
        baud_choice = int(input("–í—ã–±–µ—Ä–∏—Ç–µ (1-4): "))
        selected_baud = baud_rates.get(baud_choice, 9600)
    except ValueError:
        selected_baud = 9600

    # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä
    plotter = RF603RealtimePlotter(max_points=1000)

    if not plotter.connect(selected_port, selected_baud):
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")
        return

    print("\n" + "="*70)
    print("–ù–ê–ß–ê–õ–û –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ò")
    print("="*70)
    print("–ó–∞–∫—Ä–æ–π—Ç–µ –æ–∫–Ω–æ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    print("="*70)

    # –ó–∞–ø—É—Å–∫–∞–µ–º
    csv_file = plotter.run()

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–Ω–∞–ª–∏–∑
    if csv_file:
        print("\n" + "="*70)
        print("–ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–•")
        print("="*70)
        analyze = input("–í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑? (y/n): ").lower()

        if analyze == 'y':
            from rf603_logger import RF603OscillationAnalyzer

            analyzer = RF603OscillationAnalyzer()
            if analyzer.load_csv(csv_file):
                analyzer.normalize_data()

                duration = float(input("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ (—Å–µ–∫) [1.0]: ") or "1.0")
                success, period, freq, peaks = analyzer.auto_crop_oscillations(duration)

                if success:
                    print(f"\n‚è±Ô∏è –ü–µ—Ä–∏–æ–¥: {period:.6f} —Å–µ–∫")
                    print(f"üìä –ß–∞—Å—Ç–æ—Ç–∞: {freq:.2f} –ì—Ü")

                    if analyzer.log_decrement:
                        print(f"üìâ –õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏–π –¥–µ–∫—Ä–µ–º–µ–Ω—Ç: {analyzer.log_decrement:.6f}")
                        print(f"üìâ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–æ—Ç–µ—Ä—å: {analyzer.loss_factor:.6f}")

                    analyzer.plot_results()

    print("\n‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


if __name__ == "__main__":
    main()
